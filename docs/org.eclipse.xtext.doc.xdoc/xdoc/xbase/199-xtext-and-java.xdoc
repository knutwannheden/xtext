chapter:Xbase[Xtext and Java]

The following chapter demonstrates how to integrate your own DSL with Java. We will do this in four
stages: First, you will learn how to refer to existing Java elements from within your language. Then
you will use Xbase to refer to generic types. In the third step, you will map your own DSL's concepts 
to Java concepts. Last but not least, you will use both Java types and your concepts within Xbase 
expressions and execute it. 

Throughout this chapter, we will step by step improve the ref:DomainmodelNextSteps[domain model example from the tutorial].  

section[Plug-in Setup]

In the following, we are going to use the JVM types model and the Xbase language library. Have a look at your 
MWE2 workflow and make sure that 
ul[
  item[the Xbase models are registered in the standalone setup and]
  item[the 
    codeRef[org.eclipse.xtext.generator.types.TypesGeneratorFragment] and the 
    codeRef[org.eclipse.xtext.generator.xbase.XbaseGeneratorFragment] are enabled.]
]

code[MWE2][
bean = StandaloneSetup {
  ...
  registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
  registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
}
...
fragment = types.TypesGeneratorFragment {}
fragment = xbase.XbaseGeneratorFragment {}
]

To avoid running out of memory when regenerating, make sure to run the workflow with reasonably sized heap and
PermGen space. We recommend at least 

code[-Xmx512m -XX:MaxPermSize=128m] 

in the e[VM Arguments] section of the e[Arguments] tab of the run configuration. If you are experiencing ambiguity 
warnings from Antlr, the ref:antlr_errors[usual countermeasures] apply. The launch configuration that
you get with a new Xtext project is already configured properly.

section-ref[jvmtypes]

section-ref[xbaseJavaReferences]

section-ref[xbaseInferredType]

section-ref[xbaseExpressions]

section-ref[xbaseLanguageRef_Introduction]

