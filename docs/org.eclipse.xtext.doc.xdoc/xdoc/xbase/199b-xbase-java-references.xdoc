section:xbaseJavaReferences[Referring to Java Types Using Xbase]

While the JVM types approach from the previous chapter allows to refer to any Java element, it is quite
limited when it comes to generics. Usually, a type reference in Java can have type arguments which can also include
wildcards, upper and lower bounds etc. A simple cross-reference using a qualified name is not enough
to express neither the syntax nor the structure of such a type reference. 

Xbase offers a parser rule e[JvmTypeReference] which supports the full syntax of a Java type reference
and instantiates a JVM element of type codeRef[org.eclipse.xtext.common.types.JvmTypeReference]. So
let us start by inheriting from Xbase:

code[Xtext][
grammar org.eclipse.xtext.example.Domainmodel 
   with org.eclipse.xtext.xbase.Xbase
]

Because we can express all kinds of Java type references directly now, an indirection for e[DataTypes] as
in the previous section is no longer necessary. If we start from the ref:DomainmodelNextSteps[domain model 
example in the tutorial] again, we have to replace all cross-references to e[Types] by calls to the production 
rule e[JvmTypeReference]. The rules e[DataType], e[Type], and e[QualifiedName] become obsolete (the latter is 
already defined in Xbase), and the e[Type] in e[AbstractEntity] must be changed to e[Entity]. As we now have 
all kinds of generic Java collections at hand, e[Feature.many] is obsolete, too. The whole grammar now reads:

code[Xtext][
grammar org.eclipse.xtext.example.Domainmodel with
                                      org.eclipse.xtext.xbase.Xbase

generate domainmodel "http://www.eclipse.org/xtext/example/Domainmodel"

Domainmodel:
  (elements += AbstractElement)*
;

PackageDeclaration:
  'package' name = QualifiedName '{'
    (elements += AbstractElement)*
  '}'
;

AbstractElement:
  PackageDeclaration | Entity | Import
;

Import:
  'import' importedNamespace = QualifiedNameWithWildcard
;
  
QualifiedNameWithWildcard:
  QualifiedName '.*'?
;
  
Entity:
  'entity' name = ID 
              ('extends' superType = JvmTypeReference)?
  '{'
    (features += Feature)*
  '}'
;
 
Feature:
  name = ID ':' type = JvmTypeReference
; 
]

As we changed the grammar, we have to regenerate the language now.

Being able to parse a Java type reference is already nice, but we also have to write them back to their string
representation when we generate Java code. Unfortunately, a generic type reference with fully qualified
class names can become a bit bulky. Therefore, the codeRef[org.eclipse.xtext.xbase.compiler.ImportManager] shortens
fully qualified names, keeps track of imported namespaces, avoids name collisions, and helps to serialize
codeRef[org.eclipse.xtext.common.types.JvmTypeReference][JvmTypeReferences] by means of the 
codeRef[org.eclipse.xtext.xbase.compiler.TypeReferenceSerializer]. This utility encapsulates how type
references may be serialized depending on the concrete context in the output.

The following snippet shows our code generator using an codeRef[org.eclipse.xtext.xbase.compiler.ImportManager]
in conjunction with as codeRef[org.eclipse.xtext.xbase.compiler.TypeReferenceSerializer].
We create a new instance and pass it through the generation functions, collecting types on the way. As
the import section in a Java file precedes the class body, we create the body into a String variable
and assemble the whole file's content in a second step.

code[Xtend][
class DomainmodelGenerator implements IGenerator {
  
  @Inject extension IQualifiedNameProvider
  @Inject extension TypeReferenceSerializer 

  override void doGenerate(Resource resource, IFileSystemAccess fsa) {
    for(e: resource.allContents.toIterable.filter(typeof(Entity))) {
      fsa.generateFile(
        e.fullyQualifiedName.toString("/") + ".java",
        e.compile)
    }
  }
  
  def compile(Entity it) '''
    «val importManager = new ImportManager(true)» 
    «val body = body(importManager)»
    «IF eContainer != null»
      package «eContainer.fullyQualifiedName»;
    «ENDIF»
    
    «FOR i:importManager.imports»
      import «i»;
    «ENDFOR»
    
    «body»
  '''
  
  def body(Entity it, ImportManager importManager) '''
    public class «name» «IF superType != null»
      extends «superType.shortName(importManager)» «ENDIF»{
      «FOR f : features»
        «f.compile(importManager)»
      «ENDFOR»
    }
  '''
    
  def compile(Feature it, ImportManager importManager) '''
    private «type.shortName(importManager)» «name»;
    
    public «type.shortName(importManager)» 
      get«name.toFirstUpper»() {
      return «name»;
    }
    
    public void set«name.toFirstUpper»(
      «type.shortName(importManager)» «name») {
      this.«name» = «name»;
    }
  '''
  
  def shortName(JvmTypeReference ref, 
          ImportManager importManager) {
    val result = new StringBuilderBasedAppendable(importManager)
    ref.serialize(ref.eContainer, result);
    result.toString
  }
}
]