section2:xbaseLanguageRef_LibraryExtension[Extension Methods]

Languages extending Xbase might want to contribute to the feature scope. Besides that, one can of course
change the whole implementation as it seems fit. There is a special hook, which can be used to add 
so-called extension methods to existing types. 

Xbase itself comes with a standard library of such extension methods adding support for various operators
for the common types, such as codeRef[java.lang.String], codeRef[java.util.List], etc.

These extension methods are declared in separate Java classes. There are various ways how extension methods
can be added. In the simplest case the language designer predefines which extension methods are available.
Language users cannot add additional library functions using this mechanism.

Another alternative is to have them looked up by a certain naming convention. Also for more general languages
it is possible to let users add extension methods using imports or similar mechanisms. This approach can be seen in the
language link[http://www.xtend-lang.org][Xtend], where extension methods are lexically imported through static
imports and/or dependency injection.

The precedence of extension methods is always lower than real member methods, i.e. you cannot override
member features. Also the extension members are not invoked polymorphic. If you have two extension methods
on the scope (code[foo(Object)] and code[foo(String)]) the expression code[Xbase][(foo as Object).foo] would
bind and invoke code[foo(Object)].

section3[Examples]

ul[
  item[code[foo]]
  item[code[my.foo]]
  item[code[my.foo(x)]]
  item[code[oh.my.foo(bar)]]
]

section3:XbaseLanguageRef_builderSyntax[Builder Syntax]

If the last argument of a method call is a lambda expression, it can be appended to the method call. Thus,

code[Xbase][
foo(42) \[ String s | s.toUpperCase \]   
]

will call a Java method with the signature

code[Java][
void foo(int, Function1<String, String>)
] 

Used in combination with the ref:Xbase_Expressions_implicit_parameter[implicit parameter name in lambda
expressions]
you can write ref:xbaseLanguageRef_LibraryExtension[extension libraries] to create and initialize graphs of
objects in a concise builder syntax like in Groovy. Consider you have a set of library methods 

code[Java][
HtmlNode html(Function1<HtmlNode, Void> initializer)
HeadNode head(HtmlNode parent, Function1<HeadNode, Void> initializer)
...
]

that create DOM elements for HTML pages inside their respective parent elements. You can then create a DOM
using the following Xbase code:

code[Xbase][
html(\[ html | 
  head(html, \[ 
    // initialize head
  \]) 
\] )
]   

Appending the lambda expression parameters and prepending the parent parameters using extension syntax yields
code[Xbase][
html() \[ html | 
  html.head() \[ 
    // initialize head
  \]  
\] 
]  

Using implicit parameter code[Xbase][it] and skipping empty parentheses you can simplify this to 
code[Xbase][
html \[ 
  head \[ 
    // initialize head
  \]  
\] 
]
