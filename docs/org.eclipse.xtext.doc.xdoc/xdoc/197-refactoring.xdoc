section:refactoring[Rename Refactoring]

Xtext provides rename refactoring of the elements in your language. That includes

ul[
item[a command, handlers and keybindings on both declarations and references,]
item[in-place linked editing for the new name,]
item[validation and preview,]
item[renaming of declaration and all references even across language boundaries.]
]

To enable refactoring support make sure the 
codeRef[org.eclipse.xtext.ui.generator.refactoring.RefactorElementNameFragment]
is enabled in the fragment section of the MWE workflow of your language, e.g.

code[MWE2][
// rename refactoring
fragment = refactoring.RefactorElementNameFragment {}
]

The fragment has an additional flag code[useJdtRefactoring] which can be used to delegate to JDT's
refactoring infrastructure for languages using ref:Xbase[Xbase] and an 
ref:xbaseInferredType[inferred JVM model] (i.e. the domain model example or Xtend). 

If you have stuck to the defaults with regard to naming, cross-referencing, and indexing rename refactoring
should not need any customization. Give it a try. 

section2[Customizing]

The most likely component you want to customize is the codeRef[org.eclipse.xtext.ui.refactoring.IRenameStrategy]. 
This component defines how the declaration of the target element is performed. It has two major responsibilities:

ul[
item[Apply and revert the declaration change on the semantic model (methods code[applyDeclarationChange] 
and code[revertDeclarationChange]). The default is to look for an codeRef[org.eclipse.emf.ecore.EAttribute] 
code[name] on the target object and set its value using EMFs reflective API.]
item[Create the LTK codeRef[org.eclipse.ltk.core.refactoring.Change] objects of the declaration change. These 
changes will be aggregated, checked for overlaps, presented to you in the preview and finally executed if you 
apply the refactoring. The default is to use the codeRef[org.eclipse.xtext.resource.ILocationInFileProvider]
to locate the text range representing the name and create a codeRef[org.eclipse.text.edits.ReplaceEdit] for it. 
]
] 

As the codeRef[org.eclipse.xtext.ui.refactoring.IRenameStrategy] is a stateful object, you have to bind a 
custom codeRef[org.eclipse.xtext.ui.refactoring.IRenameStrategy$Provider] to create it.

The second component you might want to customize is the 
codeRef[org.eclipse.xtext.ui.refactoring.IDependentElementsCalculator]. Dependent elements are those elements 
whose name change when the target element is renamed. For example, when you rename a Java class the qualified 
names of its inner classes change, too, thus references to these have to be updated as well. This calculation 
is performed by the codeRef[org.eclipse.xtext.ui.refactoring.IDependentElementsCalculator]. By default, all 
elements contained in the target element are added. This matches Xtext's default strategy of qualified name 
computation.

section2[Rename Participants]

One refactoring can trigger another: When renaming a rule in an Xtext grammar, the returned
codeRef[org.eclipse.emf.ecore.EClass] should be renamed, too. For these cases, you can register a 
codeRef[org.eclipse.ltk.core.refactoring.participants.RenameParticipant] by the common means of LTK. If the 
target of the participant is Xtext based, you can use a 
codeRef[org.eclipse.xtext.ui.refactoring.impl.AbstractProcessorBasedRenameParticipant].



