chapter:template[Template Language]

This is a little template language specialized in generating HTML documents.

img[images/template_screenshot.png][][][]

The language allows web designers to do their job and lets developers put in the dynamic parts. 
The syntax and terminals are chosen to be readable and allow rendering the templates in the browser as 
well as in any HTML 5 compatible WYSIWYG editors. Still, when opened in the DSL editor you get the 
fully featured, statically typed Eclipse editor.

section:templates_solution[Overview]

A template language works in two modes: Plain text mode, where everything goes directly into the output
and the expression mode, where expressions have to be evaluated and the result is inserted into the text.
To switch between text mode and expression mode, we use the French quotes code[«] and code[»]. A document
starts in text mode.

The template will be compiled to a Java class with a code[generate(params)] method. You can provide 
additional information like a package declaration, imports and parameters in the preamble inside a 
template at the beginning of the document.

We provide additional code[templates][FOR-ENDFOR] and code[templates][IF-ELSE-ENDIF] statements to
iterate / branch over fixed text blocks. To distinguish them from the Xbase expressions with the same
names, they are in uppercase.

section:templates_running[Running the Example]

In the runtime workspace, run the e[GenerateHtml] file as a Java application (e[Run
as... > Java Application] from the context menu). This will execute the template e[MyWebsite] and print
the result to the console.   

section:templates_grammar[Grammar]

This is the grammar of the templates DSL:
 
code[Xtext][
grammar org.xtext.template.Template 
    with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate template "http://www.xtext.org/template/Template"
import 'http://www.eclipse.org/xtext/xbase/Xbase' as xbase

TemplateFile:
  '<!--''«' 
    ('package' package=QualifiedName)? 
    imports+=Import* 
    params+=Parameter* 
    body=RichString;

Import:
  'import' importedNamespace=QualifiedName;

Parameter:
  annotations+=XAnnotation* 
  'param' type=JvmTypeReference? name=ID ('=' defaultexp=XExpression)?;

RichString returns xbase::XBlockExpression:
  {RichString}  
  expressions+=RichStringLiteral 
  (expressions+=RichStringPart expressions+=RichStringLiteral)*;

RichStringLiteral returns xbase::XStringLiteral:
  {RichStringLiteral} value=TEXT;

RichStringPart returns xbase::XExpression:
  XExpressionInsideBlock |
  RichStringForLoop |
  RichStringIf;

RichStringForLoop returns xbase::XForLoopExpression:
  {RichStringForLoop}
  "FOR" declaredParam=JvmFormalParameter ':' forExpression=XExpression
    eachExpression=RichString
  "ENDFOR";

RichStringIf returns xbase::XIfExpression:
  {RichStringIf}
  "IF" if=XExpression
    then=RichString
  (else=RichStringElseIf | "ELSE" else=RichString)?
  "ENDIF";
  
RichStringElseIf returns xbase::XIfExpression:
  {RichStringIf}
  "ELSEIF" if=XExpression
    then=RichString
  (else=RichStringElseIf | "ELSE" else=RichString)?;

terminal TEXT : '»' (!'«')* (EOF|'«');
]

It becomes quite straightforward once you have understood the escaping. Have a look at the last rule
e[TEXT] first: It says that a text starts with a closing French quote and ends with an opening quote or 
the end of the file. By inverting opening and closing quotes we mark up text instead of expressions. 

A e[TemplateFile] starts with a comment and switches to the expression mode for the preamble part consisting 
of the package declaration, the imports and the parameter declaration. The body is a e[RichString], which
is an alternating sequence of e[RichStringLiterals] and e[RichStringPart]. The e[RichStringLiterals]
is essentially a text block (in inverted French quotes). The e[RichStringPart] is either an Xbase expression,
a e[RichStringForLoop] or a e[RichStringIf]. The latter inherit from the Xbase expressions with the same name 
to reuse as much of the Xbase infrastructure as possible. The rest should be easy.

section:templates_inferrer[Translation to Java]

Each e[TemplateFile] is compiled to a Java class with a code[Java][generate] method that takes a lambda
expression as a parameter. The lambda expression is called to initialize the template's properties, by 
handling the template itself as an argument. This comes along nicely, especially when called from Xtend.

table[
tr[td[DSL]td[code[templates][
<!--«
  ...
»-->
]]]
tr[td[Java]td[code[Java][
public class MyWebsite {
...  
  public String generate(final Procedure1<MyWebsite> init) {
    if (init != null)
      init.apply(this);
    String result = generate().toString();
    // remove leading -->
    result = result.replaceAll("^-->\\n","");
    // trim multi-newline to single newline
    result = result.replaceAll("\\n\\s*\\n","\n");
    return result;
    
  }
}
]]]
]

The corresponding code in the codeRef[org.xtext.template.jvmmodel.TemplateJvmModelInferrer] is:

code[Xtend][
class TemplateJvmModelInferrer extends AbstractModelInferrer {
...
     def dispatch void infer(TemplateFile element, 
                             IJvmDeclaredTypeAcceptor acceptor, 
                             boolean isPreIndexingPhase) {
       val simpleName = element.eResource.URI.trimFileExtension.lastSegment
       val qualifiedName = if(element.getPackage != null) 
           element.getPackage + "." + simpleName
         else 
           simpleName
    val javaClass = element.toClass(qualifiedName)
       acceptor.accept(javaClass).initializeLater \[
...
      // generate a method accepting an initializer lambda expression
      members += element.toMethod("generate", 
          element.newTypeRef(typeof(String))) \[
        parameters += element.toParameter(
          "init", 
          element.newTypeRef(typeof(Procedures$Procedure1), 
              newTypeRef(javaClass))
        )
        body = \[
          append('''
            if (init != null)
              init.apply(this);
            String result = generate().toString();
            // remove leading -->
            result = result.replaceAll("^-->\\n","");
            // trim multi-newline to single newline
            result = result.replaceAll("\\n\\s*\\n","\n");
            return result;
          ''')
        \]
...]

Each e[Parameter] becomes a Java property, i.e. a field with a getter and a setter. 

table[
tr[td[DSL]td[code[templates][
param title = "No Title"
]]]
tr[td[Java]td[code[Java][
private String title = "No Title";

public void setTitle(final String title) {
  this.title = title;
}

public String getTitle() {
  return this.title;
}
]]]
]

In the inferrer, note that we derive the property's type in three steps: Take the declared one, if there is none, 
derive it from the initializer using the injected codeRef[org.eclipse.xtext.xbase.typing.ITypeProvider]
and if even that fails, use codeRef[java.lang.String] as default. 

code[Xtend][
@Inject extension ITypeProvider
...
for (param : element.params) {
  val type = param.type 
    ?: param.defaultexp?.type 
    ?: element.newTypeRef(typeof(String))
  members += param.toField(param.name, type) \[
    if (param.defaultexp != null)
      initializer = param.defaultexp
  \]
  members += param.toSetter(param.name, type)
  members += param.toGetter(param.name, type)
}
]

The body of the template is compiled into a big private code[Java][generate()] method. We skip
the inferrer code here, as it is straightforward. But we had to extend the compiler to support rich
strings and the new code[templates][FOR] loop our new control structures. This is described in the 
ref:templates_compiler[next section].

table[
tr[td[DSL]td[code[templates][
»<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>«title»</title>
  <meta name="viewport" content="width=device-width, initial-sca...">
  <meta name="description"
    content="«description»">
  <meta name="author" content="«...
]]]
tr[td[Java]td[code[Java][
private CharSequence generate() {
  StringBuilder _appendable = new StringBuilder();
  _appendable.append(ObjectExtensions.operator_elvis(
    "-->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta...",
    ""));
  _appendable.append(ObjectExtensions.operator_elvis(
    this.title,""));
  // appends galore
...
]]]
]

section:templates_compiler[Extending the Compiler]

We have added additional expressions to Xbase, so we have to tell the compiler how to translate them
to Java. The codeRef[org.eclipse.xtext.xbase.compiler.XbaseCompiler] has a method 
code[Java][doInternalToJavaStatement] that dispatches the compilation with regard to the type of the
current expression. This is where we have to hook in with our codeRef[org.xtext.template.jvmmodel.TemplateCompiler]:

code[Xtend][
class TemplateCompiler extends XbaseCompiler {
  
  override protected doInternalToJavaStatement(XExpression expr, 
                                               ITreeAppendable it, 
                                               boolean isReferenced) {
    switch expr {
      RichString : {
...   }
      RichStringForLoop : {
...   }
      default :
        super.doInternalToJavaStatement(expr, it, isReferenced)
    }
  }
...
]

For a e[RichString], we declare a variable code[Xtend][_appendable] of type codeRef[java.lang.StringBuilder]
and append the results of all its evaluated expressions. Remember from the grammar that every second expression
is a e[RichStringPart] which can be code[Xtend][null], so we use the 'elvis operator' code[Xbase][?:]
to insert an empty string in this case. 

code[Xtend][
RichString : {
  val name = declareVariable(expr, '_appendable')
  newLine
  append('''
    StringBuilder «name» = new StringBuilder();
  ''')
  for (nestedExpression : expr.expressions) {
    nestedExpression.internalToJavaStatement(it, true)
    newLine
    append('''«name».append(ObjectExtensions.operator_elvis(''')
    nestedExpression.internalToJavaExpression(it)
    append(',""));')
  }
}
] 

As our e[RichStringLiteral] inherits from codeRef[org.eclipse.xtext.xbase.XStringLiteral], it does not
need any special treatment. The same holds for e[RichStringIf] and e[RichStringElseIif]. The e[RichStringForLoop]
requires special treatment, because as opposed to the codeRef[org.eclipse.xtext.xbase.XForLoopExpression]
that always returns code[Java][null], we want it to return a concatenation of its results. This looks
like

code[Xtend][
RichStringForLoop : {
  expr.forExpression.internalToJavaStatement(it, true)
  val paramType = typeProvider.getTypeForIdentifiable(expr.declaredParam)
  val name = declareVariable(expr, '_forLoopResult')
  newLine
  append('''
    StringBuilder «name» = new StringBuilder();
    for (final ''')
  serialize(paramType, expr, it);
  append(''' «declareVariable(expr.declaredParam, 
      makeJavaIdentifier(expr.declaredParam.name))» : ''')
  internalToJavaExpression(expr.forExpression, it)
  append(") {").increaseIndentation
    expr.eachExpression.internalToJavaStatement(it, true)
    newLine
    append('''«name».append(''')
    expr.eachExpression.internalToJavaExpression(it)
    append(');')
  decreaseIndentation.newLine.append("}")
}] 

The compiler now knows how to handle the new expressions in a statement context. In addition, we have
to teach it to compile them in an expression context. This is what the second method does:

code[Xtend][
override protected internalToConvertedExpression(XExpression obj, 
                                                 ITreeAppendable it) {
  if (hasName(obj))
    append(getName(obj))
  else 
    super.internalToConvertedExpression(obj, it) 
}
]

As usual, we have to bind our codeRef[org.xtext.template.jvmmodel.TemplateCompiler] in the 
codeRef[org.xtext.template.TemplateRuntimeModule] in order to be picked up as the 
codeRef[org.eclipse.xtext.xbase.compiler.XbaseCompiler] in the context of our language.

section:templates_typeProvider[TypeProvider]

The type system has to know what types our new expressions have. This is the job of the 
codeRef[org.xtext.template.jvmmodel.TemplateTypeProvider]: e[RichString] becomes a 
codeRef[java.lang.StringBuilder]. As opposed to its super type 
codeRef[org.eclipse.xtext.xbase.XForLoopExpression] a e[RichStringForLoop] is of type
codeRef[java.lang.StringBuilder] as well. The for-loop's body is expected to have a type, as the results
must be concatenatable, which is different from Xbase's for-loop.

code[Xtend][
@Singleton
class TemplateTypeProvider extends XbaseTypeProvider {
  
  @Inject TypeReferences typeReferences
  
  def dispatch type(RichString string, 
                    JvmTypeReference typeRef, 
                    boolean isRawTypes) {
    typeReferences.getTypeForName(typeof(StringBuilder), string)
  }
  
  def dispatch type(RichStringForLoop string, 
                    JvmTypeReference typeRef, 
                    boolean isRawTypes) {
    typeReferences.getTypeForName(typeof(StringBuilder), string)
  }
  
  def dispatch expectedType(RichStringForLoop container, 
                            EReference reference, 
                            int index, boolean rawType) {
    if (reference == XFOR_LOOP_EXPRESSION__EACH_EXPRESSION)
      typeReferences.getTypeForName(typeof(Object), container)
    else
      super._expectedType(container,reference,index, rawType)
  }
}
]

Like the compiler, we have to bind this implementation in our 
codeRef[org.xtext.template.TemplateRuntimeModule][runtime module] as well.

section:templates_valueConverter[Value Converter]

The e[RichStringLiterals] still have the French quotes around their values. As we do not want to see 
them in the output, we
have implemented the codeRef[org.xtext.template.TemplateValueConverterService] and bound it in the 
codeRef[org.xtext.template.TemplateRuntimeModule][runtime module].

section:templates_contentAssist[Content Assist]

The French quotes are not easy to type on every keyboard. We have adapted content assist to insert them
when the cursor is inside a TEXT terminal:

code[Java][
public class TemplateProposalProvider 
    extends AbstractTemplateProposalProvider {
  @Override
  public void complete_TEXT(EObject model, 
                            RuleCall ruleCall, 
                            ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
    acceptor.accept(new CompletionProposal("«»", 
        context.getOffset(), 0, 1));
  }
}
]

section:templates_highlighting[Syntax Highlighting]

Sometimes it is hard to see whether you are in text or expression mode. To give the user better feedback,
we have changed the way the text is highlighted. This customization consists of two parts: Add new highlighting
styles in the codeRef[org.xtext.template.ui.highlighting.TemplateHighlightingConfiguration] and apply
them to the text in the codeRef[org.xtext.template.ui.highlighting.TemplateHighlightingCalculator]. As
this is rather extensively covered in the link[documentation.html#highlighting][Xtext documentation], we 
skip a deeper explanation here.
