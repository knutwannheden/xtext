«REM»
/*******************************************************************************
 * Copyright (c) 2008, 2009 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«REM»
/**
 * @author Moritz Eysholdt
 * @author Sebastian Zarnekow
 */
 «ENDREM»

«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::generator::grammarAccess::GrammarAccess»
«EXTENSION org::eclipse::xtext::GrammarUtil»

«DEFINE root FOR Grammar»
«FILE gaFQName().asPath()+".java" SRC_GEN-»
/*
«fileHeader()»
*/
package «gaFQName().toJavaPackage()»;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

«FOREACH allUsedGrammars().reject(g|g.rules.typeSelect(ParserRule).isEmpty && !usedGrammars.contains(g)) AS usedGrammar-»
import «usedGrammar.gaFQName()»;
«ENDFOREACH-»

@Singleton
public class «gaSimpleName()» extends AbstractGrammarElementFinder {
	
	«EXPAND parseRuleClasses FOREACH rules.typeSelect(ParserRule)-»
	
	«EXPAND parseRuleClasses FOREACH rules.typeSelect(EnumRule)-»
	
	«EXPAND cache FOREACH rules-»
	
	private final Grammar grammar;
«FOREACH usedGrammars AS g-»

	private «g.gaSimpleName()» «g.gaGrammarAccessLocalVarName()»;
«ENDFOREACH-»

	@Inject
	public «gaSimpleName()»(GrammarProvider grammarProvider«FOREACH usedGrammars AS g-»,
		«g.gaSimpleName()» «g.gaGrammarAccessLocalVarName()»«ENDFOREACH») {
		this.grammar = internalFindGrammar(grammarProvider);
«FOREACH usedGrammars AS g-»
		this.«g.gaGrammarAccessLocalVarName()» = «g.gaGrammarAccessLocalVarName()»;
«ENDFOREACH-»
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("«this.getId()»".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	
«FOREACH usedGrammars AS g-»

	public «g.gaSimpleName()» get«g.gaSimpleName()»() {
		return «g.gaGrammarAccessLocalVarName()»;
	}
«ENDFOREACH-»

	«EXPAND getter(this) FOREACH allRules()-»
}
«ENDFILE»
«ENDDEFINE»



«DEFINE parseRuleClasses FOR ParserRule»
	public class «gaRuleAccesorClassName()» extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "«name»");
«FOREACH containedAbstractElements() AS e-»
		private final «e.getClassName()» «e.gaElementAccessorLocalVarName()» = «e.loadElementStatement()»;
«ENDFOREACH-»
		
«grammarFragmentToStr("		//")»
		public ParserRule getRule() { return rule; }
«FOREACH containedAbstractElements() AS e»
«grammarFragmentToStr(e, "		//")»
		public «e.getClassName()» «e.gaElementAccessMethodeName()»() { return «e.gaElementAccessorLocalVarName()»; }
«ENDFOREACH-»
	}
«ENDDEFINE»

«DEFINE parseRuleClasses FOR EnumRule»
	public class «gaRuleAccesorClassName()» extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "«name»");
«FOREACH containedAbstractElements() AS e-»
		private final «e.getClassName()» «e.gaElementAccessorLocalVarName()» = «e.loadElementStatement()»;
«ENDFOREACH-»
		
«grammarFragmentToStr("		//")»
		public EnumRule getRule() { return rule; }
«FOREACH containedAbstractElements() AS e»
«grammarFragmentToStr(e, "		//")»
		public «e.getClassName()» «e.gaElementAccessMethodeName()»() { return «e.gaElementAccessorLocalVarName()»; }
«ENDFOREACH-»
	}
«ENDDEFINE»	

«DEFINE cache FOR AbstractRule»
«ERROR "unknown rule type " + metaType»
«ENDDEFINE»

«DEFINE cache FOR ParserRule-»
	private «gaRuleAccesorClassName()» «gaRuleAccessorLocalVarName()»;
«ENDDEFINE»

«DEFINE cache FOR EnumRule-»
	private «gaRuleAccesorClassName()» «gaRuleAccessorLocalVarName()»;
«ENDDEFINE»

«DEFINE cache FOR TerminalRule-»
	private TerminalRule «gaRuleAccessorLocalVarName()»;
«ENDDEFINE»


«DEFINE getter(Grammar original) FOR AbstractRule»
«ERROR "unknown rule type " + metaType»
«ENDDEFINE»

«DEFINE getter(Grammar original) FOR ParserRule»
«grammarFragmentToStr("	//")»
«IF containingGrammar() == original-»
	public «gaRuleAccesorClassName()» «gaElementsAccessor()» {
		return («gaRuleAccessorLocalVarName()» != null) ? «gaRuleAccessorLocalVarName()» : («gaRuleAccessorLocalVarName()» = new «gaRuleAccesorClassName()»());
	}
«ELSE-»	
	public «containingGrammar().gaSimpleName()».«gaRuleAccesorClassName()» «gaElementsAccessor()» {
		return «usedGrammar(original).gaGrammarAccessLocalVarName()».«gaElementsAccessor()»;
	}
«ENDIF-»
	
	public ParserRule «gaRuleAccessor()» {
		return «gaElementsAccessor()».getRule();
	}
«ENDDEFINE»

«DEFINE getter(Grammar original) FOR EnumRule»
«grammarFragmentToStr("	//")»
«IF containingGrammar() == original-»
	public «gaRuleAccesorClassName()» «gaElementsAccessor()» {
		return («gaRuleAccessorLocalVarName()» != null) ? «gaRuleAccessorLocalVarName()» : («gaRuleAccessorLocalVarName()» = new «gaRuleAccesorClassName()»());
	}
«ELSE-»	
	public «containingGrammar().gaSimpleName()».«gaRuleAccesorClassName()» «gaElementsAccessor()» {
		return «usedGrammar(original).gaGrammarAccessLocalVarName()».«gaElementsAccessor()»;
	}
«ENDIF-»
	
	public EnumRule «gaRuleAccessor()» {
		return «gaElementsAccessor()».getRule();
	}
«ENDDEFINE»

«DEFINE getter(Grammar original) FOR TerminalRule»
«grammarFragmentToStr("	//")»
	public TerminalRule «gaRuleAccessor()» {
«IF containingGrammar() == original-»
		return («gaRuleAccessorLocalVarName()» != null) ? «gaRuleAccessorLocalVarName()» : («gaRuleAccessorLocalVarName()» = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "«name»"));
«ELSE-»
		return «usedGrammar(original).gaGrammarAccessLocalVarName()».«gaRuleAccessor()»;
«ENDIF-»
	} 
«ENDDEFINE»