/*
* generated by Xtext
*/
package org.eclipse.xtext.common.types.xtext.ui.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.common.types.xtext.ui.services.ContentAssistTestLanguageGrammarAccess;

public class ContentAssistTestLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private ContentAssistTestLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.common.types.xtext.ui.ui.contentassist.antlr.internal.InternalContentAssistTestLanguageParser createParser() {
		org.eclipse.xtext.common.types.xtext.ui.ui.contentassist.antlr.internal.InternalContentAssistTestLanguageParser result = new org.eclipse.xtext.common.types.xtext.ui.ui.contentassist.antlr.internal.InternalContentAssistTestLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getReferenceHolderAccess().getAlternatives(), "rule__ReferenceHolder__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getReferenceHolderAccess().getGroup_0(), "rule__ReferenceHolder__Group_0__0");
					put(grammarAccess.getReferenceHolderAccess().getGroup_1(), "rule__ReferenceHolder__Group_1__0");
					put(grammarAccess.getReferenceHolderAccess().getGroup_2(), "rule__ReferenceHolder__Group_2__0");
					put(grammarAccess.getGenerateDirectiveAccess().getGroup(), "rule__GenerateDirective__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getImportedFQNAccess().getGroup(), "rule__ImportedFQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getQNAccess().getGroup(), "rule__QN__Group__0");
					put(grammarAccess.getQNAccess().getGroup_1(), "rule__QN__Group_1__0");
					put(grammarAccess.getModelAccess().getImportsAssignment_0(), "rule__Model__ImportsAssignment_0");
					put(grammarAccess.getModelAccess().getGenerateDirectiveAssignment_1(), "rule__Model__GenerateDirectiveAssignment_1");
					put(grammarAccess.getModelAccess().getReferenceHolderAssignment_2(), "rule__Model__ReferenceHolderAssignment_2");
					put(grammarAccess.getReferenceHolderAccess().getDefaultReferenceAssignment_0_1(), "rule__ReferenceHolder__DefaultReferenceAssignment_0_1");
					put(grammarAccess.getReferenceHolderAccess().getCustomizedReferenceAssignment_1_1(), "rule__ReferenceHolder__CustomizedReferenceAssignment_1_1");
					put(grammarAccess.getReferenceHolderAccess().getSubtypeReferenceAssignment_2_1(), "rule__ReferenceHolder__SubtypeReferenceAssignment_2_1");
					put(grammarAccess.getGenerateDirectiveAccess().getTypeNameAssignment_1(), "rule__GenerateDirective__TypeNameAssignment_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.common.types.xtext.ui.ui.contentassist.antlr.internal.InternalContentAssistTestLanguageParser typedParser = (org.eclipse.xtext.common.types.xtext.ui.ui.contentassist.antlr.internal.InternalContentAssistTestLanguageParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ContentAssistTestLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ContentAssistTestLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
