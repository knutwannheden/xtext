/*
* generated by Xtext
*/

package org.eclipse.xtext.common.types.xtext.ui.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.types.xtext.ui.services.RefactoringTestLanguageGrammarAccess;

@Singleton
public class RefactoringTestLanguage1GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entry");
		private final RuleCall cModelParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Entry returns Model:
		//	Model;
		public ParserRule getRule() { return rule; }

		//Model
		public RuleCall getModelParserRuleCall() { return cModelParserRuleCall; }
	}
	
	
	private EntryElements pEntry;
	
	private final Grammar grammar;

	private RefactoringTestLanguageGrammarAccess gaRefactoringTestLanguage;

	@Inject
	public RefactoringTestLanguage1GrammarAccess(GrammarProvider grammarProvider,
		RefactoringTestLanguageGrammarAccess gaRefactoringTestLanguage) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaRefactoringTestLanguage = gaRefactoringTestLanguage;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.common.types.xtext.ui.RefactoringTestLanguage1".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public RefactoringTestLanguageGrammarAccess getRefactoringTestLanguageGrammarAccess() {
		return gaRefactoringTestLanguage;
	}

	
	//Entry returns Model:
	//	Model;
	public EntryElements getEntryAccess() {
		return (pEntry != null) ? pEntry : (pEntry = new EntryElements());
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}

	//Model:
	//	referenceHolder+=ReferenceHolder*;
	public RefactoringTestLanguageGrammarAccess.ModelElements getModelAccess() {
		return gaRefactoringTestLanguage.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//ReferenceHolder:
	//	name=ID defaultReference=[types::JvmType|FQN];
	public RefactoringTestLanguageGrammarAccess.ReferenceHolderElements getReferenceHolderAccess() {
		return gaRefactoringTestLanguage.getReferenceHolderAccess();
	}
	
	public ParserRule getReferenceHolderRule() {
		return getReferenceHolderAccess().getRule();
	}

	//FQN:
	//	ID ("." ID)* ("$" ID)*;
	public RefactoringTestLanguageGrammarAccess.FQNElements getFQNAccess() {
		return gaRefactoringTestLanguage.getFQNAccess();
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaRefactoringTestLanguage.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaRefactoringTestLanguage.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaRefactoringTestLanguage.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaRefactoringTestLanguage.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaRefactoringTestLanguage.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaRefactoringTestLanguage.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaRefactoringTestLanguage.getANY_OTHERRule();
	} 
}
