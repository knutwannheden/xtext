/*
* generated by Xtext
*/
package org.eclipse.xtext.resource.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.resource.services.Bug385636GrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class Bug385636ParsetreeConstructor extends AbstractParseTreeConstructor {

	@Inject
	private Bug385636GrammarAccess grammarAccess;

	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);
	}

protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}

	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Program_Group(this, this, 0, inst);
			case 1: return new DefineVariables_Group(this, this, 1, inst);
			case 2: return new DefineVariable_Group(this, this, 2, inst);
			case 3: return new NVariableAccess_VariableAssignment(this, this, 3, inst);
			case 4: return new Statement_Group(this, this, 4, inst);
			case 5: return new Expression_VariableName_VariableAssignment(this, this, 5, inst);
			default: return null;
		}
	}
}


/************ begin Rule Program ****************
 *
 * Program:
 * 	define=DefineVariables statements+=Statement* "END";
 *
 **/

// define=DefineVariables statements+=Statement* "END"
protected class Program_Group extends GroupToken {

	public Program_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProgramAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Program_ENDKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProgramRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// define=DefineVariables
protected class Program_DefineAssignment_0 extends AssignmentToken  {

	public Program_DefineAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProgramAccess().getDefineAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefineVariables_Group(this, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("define",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("define");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDefineVariablesRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProgramAccess().getDefineDefineVariablesParserRuleCall_0_0();
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}
	}
}

// statements+=Statement*
protected class Program_StatementsAssignment_1 extends AssignmentToken  {

	public Program_StatementsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProgramAccess().getStatementsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_1_0();
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Program_StatementsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Program_DefineAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}
	}
}

// "END"
protected class Program_ENDKeyword_2 extends KeywordToken  {

	public Program_ENDKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProgramAccess().getENDKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Program_StatementsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Program_DefineAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}
	}

}


/************ end Rule Program ****************/


/************ begin Rule DefineVariables ****************
 *
 * DefineVariables:
 * 	"VARIABLES" variables+=DefineVariable+ "ENDVARIABLES";
 *
 **/

// "VARIABLES" variables+=DefineVariable+ "ENDVARIABLES"
protected class DefineVariables_Group extends GroupToken {

	public DefineVariables_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefineVariablesAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefineVariables_ENDVARIABLESKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefineVariablesRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "VARIABLES"
protected class DefineVariables_VARIABLESKeyword_0 extends KeywordToken  {

	public DefineVariables_VARIABLESKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefineVariablesAccess().getVARIABLESKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}
	}

}

// variables+=DefineVariable+
protected class DefineVariables_VariablesAssignment_1 extends AssignmentToken  {

	public DefineVariables_VariablesAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefineVariablesAccess().getVariablesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefineVariable_Group(this, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("variables",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("variables");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDefineVariableRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDefineVariablesAccess().getVariablesDefineVariableParserRuleCall_1_0();
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DefineVariables_VariablesAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new DefineVariables_VARIABLESKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}
	}
}

// "ENDVARIABLES"
protected class DefineVariables_ENDVARIABLESKeyword_2 extends KeywordToken  {

	public DefineVariables_ENDVARIABLESKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefineVariablesAccess().getENDVARIABLESKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefineVariables_VariablesAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

}


/************ end Rule DefineVariables ****************/


/************ begin Rule DefineVariable ****************
 *
 * DefineVariable:
 * 	"NAME" name=ID;
 *
 **/

// "NAME" name=ID
protected class DefineVariable_Group extends GroupToken {

	public DefineVariable_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefineVariableAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefineVariable_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefineVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "NAME"
protected class DefineVariable_NAMEKeyword_0 extends KeywordToken  {

	public DefineVariable_NAMEKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefineVariableAccess().getNAMEKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}
	}

}

// name=ID
protected class DefineVariable_NameAssignment_1 extends AssignmentToken  {

	public DefineVariable_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefineVariableAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefineVariable_NAMEKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDefineVariableAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDefineVariableAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule DefineVariable ****************/


/************ begin Rule NVariableAccess ****************
 *
 * NVariableAccess:
 * 	variable=[DefineVariable];
 *
 **/

// variable=[DefineVariable]
protected class NVariableAccess_VariableAssignment extends AssignmentToken  {

	public NVariableAccess_VariableAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNVariableAccessAccess().getVariableAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNVariableAccessRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("variable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("variable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNVariableAccessAccess().getVariableDefineVariableCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getNVariableAccessAccess().getVariableDefineVariableCrossReference_0();
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule NVariableAccess ****************/


/************ begin Rule Statement ****************
 *
 * // Comparisons: left associative, priority 2
 * Statement returns Expression:
 * 	Expression_VariableName ("C1" {Expression_Larger_Equal.left=current} right=Expression_VariableName | "C2"
 * 	{Expression_Smaller.left=current} right=Expression_VariableName | "C3" {Expression_Smaller_Equal.left=current}
 * 	right=Expression_VariableName | "C4" {Expression_Equal.left=current} right=Expression_VariableName | "C5"
 * 	{Expression_Not_Equal.left=current} right=Expression_VariableName | ("C6" "C7") {Expression_Not_Less.left=current}
 * 	right=Expression_VariableName | ("C6" "C8") {Expression_Not_Greater.left=current} right=Expression_VariableName)*;
 *
 **/

// Expression_VariableName ("C1" {Expression_Larger_Equal.left=current} right=Expression_VariableName | "C2"
// {Expression_Smaller.left=current} right=Expression_VariableName | "C3" {Expression_Smaller_Equal.left=current}
// right=Expression_VariableName | "C4" {Expression_Equal.left=current} right=Expression_VariableName | "C5"
// {Expression_Not_Equal.left=current} right=Expression_VariableName | ("C6" "C7") {Expression_Not_Less.left=current}
// right=Expression_VariableName | ("C6" "C8") {Expression_Not_Greater.left=current} right=Expression_VariableName)*
protected class Statement_Group extends GroupToken {

	public Statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_Expression_VariableNameParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_EqualLeftAction_1_3_1().getType().getClassifier() &&
		   getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Larger_EqualLeftAction_1_0_1().getType().getClassifier() &&
		   getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Not_EqualLeftAction_1_4_1().getType().getClassifier() &&
		   getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Not_GreaterLeftAction_1_6_1().getType().getClassifier() &&
		   getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Not_LessLeftAction_1_5_1().getType().getClassifier() &&
		   getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_SmallerLeftAction_1_1_1().getType().getClassifier() &&
		   getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Smaller_EqualLeftAction_1_2_1().getType().getClassifier() &&
		   getEObject().eClass() != grammarAccess.getExpression_VariableNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Expression_VariableName
protected class Statement_Expression_VariableNameParserRuleCall_0 extends RuleCallToken {

	public Statement_Expression_VariableNameParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getExpression_VariableNameParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_VariableName_VariableAssignment(this, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_VariableNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Expression_VariableName_VariableAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}
	}
}

// ("C1" {Expression_Larger_Equal.left=current} right=Expression_VariableName | "C2" {Expression_Smaller.left=current}
// right=Expression_VariableName | "C3" {Expression_Smaller_Equal.left=current} right=Expression_VariableName | "C4"
// {Expression_Equal.left=current} right=Expression_VariableName | "C5" {Expression_Not_Equal.left=current}
// right=Expression_VariableName | ("C6" "C7") {Expression_Not_Less.left=current} right=Expression_VariableName | ("C6"
// "C8") {Expression_Not_Greater.left=current} right=Expression_VariableName)*
protected class Statement_Alternatives_1 extends AlternativesToken {

	public Statement_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStatementAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Statement_Group_1_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Statement_Group_1_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Statement_Group_1_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Statement_Group_1_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Statement_Group_1_6(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_EqualLeftAction_1_3_1().getType().getClassifier() &&
		   getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Larger_EqualLeftAction_1_0_1().getType().getClassifier() &&
		   getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Not_EqualLeftAction_1_4_1().getType().getClassifier() &&
		   getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Not_GreaterLeftAction_1_6_1().getType().getClassifier() &&
		   getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Not_LessLeftAction_1_5_1().getType().getClassifier() &&
		   getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_SmallerLeftAction_1_1_1().getType().getClassifier() &&
		   getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Smaller_EqualLeftAction_1_2_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "C1" {Expression_Larger_Equal.left=current} right=Expression_VariableName
protected class Statement_Group_1_0 extends GroupToken {

	public Statement_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_RightAssignment_1_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Larger_EqualLeftAction_1_0_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "C1"
protected class Statement_C1Keyword_1_0_0 extends KeywordToken  {

	public Statement_C1Keyword_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementAccess().getC1Keyword_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_Expression_VariableNameParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}
	}

}

// {Expression_Larger_Equal.left=current}
protected class Statement_Expression_Larger_EqualLeftAction_1_0_1 extends ActionToken  {

	public Statement_Expression_Larger_EqualLeftAction_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStatementAccess().getExpression_Larger_EqualLeftAction_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_C1Keyword_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// right=Expression_VariableName
protected class Statement_RightAssignment_1_0_2 extends AssignmentToken  {

	public Statement_RightAssignment_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementAccess().getRightAssignment_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_VariableName_VariableAssignment(this, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_VariableNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementAccess().getRightExpression_VariableNameParserRuleCall_1_0_2_0();
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Statement_Expression_Larger_EqualLeftAction_1_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}
	}
}


// "C2" {Expression_Smaller.left=current} right=Expression_VariableName
protected class Statement_Group_1_1 extends GroupToken {

	public Statement_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_RightAssignment_1_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_SmallerLeftAction_1_1_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "C2"
protected class Statement_C2Keyword_1_1_0 extends KeywordToken  {

	public Statement_C2Keyword_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementAccess().getC2Keyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_Expression_VariableNameParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}
	}

}

// {Expression_Smaller.left=current}
protected class Statement_Expression_SmallerLeftAction_1_1_1 extends ActionToken  {

	public Statement_Expression_SmallerLeftAction_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStatementAccess().getExpression_SmallerLeftAction_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_C2Keyword_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// right=Expression_VariableName
protected class Statement_RightAssignment_1_1_2 extends AssignmentToken  {

	public Statement_RightAssignment_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementAccess().getRightAssignment_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_VariableName_VariableAssignment(this, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_VariableNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementAccess().getRightExpression_VariableNameParserRuleCall_1_1_2_0();
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Statement_Expression_SmallerLeftAction_1_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}
	}
}


// "C3" {Expression_Smaller_Equal.left=current} right=Expression_VariableName
protected class Statement_Group_1_2 extends GroupToken {

	public Statement_Group_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_RightAssignment_1_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Smaller_EqualLeftAction_1_2_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "C3"
protected class Statement_C3Keyword_1_2_0 extends KeywordToken  {

	public Statement_C3Keyword_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementAccess().getC3Keyword_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_Expression_VariableNameParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}
	}

}

// {Expression_Smaller_Equal.left=current}
protected class Statement_Expression_Smaller_EqualLeftAction_1_2_1 extends ActionToken  {

	public Statement_Expression_Smaller_EqualLeftAction_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStatementAccess().getExpression_Smaller_EqualLeftAction_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_C3Keyword_1_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// right=Expression_VariableName
protected class Statement_RightAssignment_1_2_2 extends AssignmentToken  {

	public Statement_RightAssignment_1_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementAccess().getRightAssignment_1_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_VariableName_VariableAssignment(this, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_VariableNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementAccess().getRightExpression_VariableNameParserRuleCall_1_2_2_0();
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Statement_Expression_Smaller_EqualLeftAction_1_2_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}
	}
}


// "C4" {Expression_Equal.left=current} right=Expression_VariableName
protected class Statement_Group_1_3 extends GroupToken {

	public Statement_Group_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_RightAssignment_1_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_EqualLeftAction_1_3_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "C4"
protected class Statement_C4Keyword_1_3_0 extends KeywordToken  {

	public Statement_C4Keyword_1_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementAccess().getC4Keyword_1_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_Expression_VariableNameParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}
	}

}

// {Expression_Equal.left=current}
protected class Statement_Expression_EqualLeftAction_1_3_1 extends ActionToken  {

	public Statement_Expression_EqualLeftAction_1_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStatementAccess().getExpression_EqualLeftAction_1_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_C4Keyword_1_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// right=Expression_VariableName
protected class Statement_RightAssignment_1_3_2 extends AssignmentToken  {

	public Statement_RightAssignment_1_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementAccess().getRightAssignment_1_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_VariableName_VariableAssignment(this, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_VariableNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementAccess().getRightExpression_VariableNameParserRuleCall_1_3_2_0();
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Statement_Expression_EqualLeftAction_1_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}
	}
}


// "C5" {Expression_Not_Equal.left=current} right=Expression_VariableName
protected class Statement_Group_1_4 extends GroupToken {

	public Statement_Group_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_RightAssignment_1_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Not_EqualLeftAction_1_4_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "C5"
protected class Statement_C5Keyword_1_4_0 extends KeywordToken  {

	public Statement_C5Keyword_1_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementAccess().getC5Keyword_1_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_Expression_VariableNameParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}
	}

}

// {Expression_Not_Equal.left=current}
protected class Statement_Expression_Not_EqualLeftAction_1_4_1 extends ActionToken  {

	public Statement_Expression_Not_EqualLeftAction_1_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStatementAccess().getExpression_Not_EqualLeftAction_1_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_C5Keyword_1_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// right=Expression_VariableName
protected class Statement_RightAssignment_1_4_2 extends AssignmentToken  {

	public Statement_RightAssignment_1_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementAccess().getRightAssignment_1_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_VariableName_VariableAssignment(this, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_VariableNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementAccess().getRightExpression_VariableNameParserRuleCall_1_4_2_0();
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Statement_Expression_Not_EqualLeftAction_1_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}
	}
}


// ("C6" "C7") {Expression_Not_Less.left=current} right=Expression_VariableName
protected class Statement_Group_1_5 extends GroupToken {

	public Statement_Group_1_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_RightAssignment_1_5_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Not_LessLeftAction_1_5_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "C6" "C7"
protected class Statement_Group_1_5_0 extends GroupToken {

	public Statement_Group_1_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup_1_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_C7Keyword_1_5_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

}

// "C6"
protected class Statement_C6Keyword_1_5_0_0 extends KeywordToken  {

	public Statement_C6Keyword_1_5_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementAccess().getC6Keyword_1_5_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_Expression_VariableNameParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}
	}

}

// "C7"
protected class Statement_C7Keyword_1_5_0_1 extends KeywordToken  {

	public Statement_C7Keyword_1_5_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementAccess().getC7Keyword_1_5_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_C6Keyword_1_5_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

}


// {Expression_Not_Less.left=current}
protected class Statement_Expression_Not_LessLeftAction_1_5_1 extends ActionToken  {

	public Statement_Expression_Not_LessLeftAction_1_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStatementAccess().getExpression_Not_LessLeftAction_1_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Group_1_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// right=Expression_VariableName
protected class Statement_RightAssignment_1_5_2 extends AssignmentToken  {

	public Statement_RightAssignment_1_5_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementAccess().getRightAssignment_1_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_VariableName_VariableAssignment(this, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_VariableNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementAccess().getRightExpression_VariableNameParserRuleCall_1_5_2_0();
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Statement_Expression_Not_LessLeftAction_1_5_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}
	}
}


// ("C6" "C8") {Expression_Not_Greater.left=current} right=Expression_VariableName
protected class Statement_Group_1_6 extends GroupToken {

	public Statement_Group_1_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup_1_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_RightAssignment_1_6_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementAccess().getExpression_Not_GreaterLeftAction_1_6_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "C6" "C8"
protected class Statement_Group_1_6_0 extends GroupToken {

	public Statement_Group_1_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup_1_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_C8Keyword_1_6_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

}

// "C6"
protected class Statement_C6Keyword_1_6_0_0 extends KeywordToken  {

	public Statement_C6Keyword_1_6_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementAccess().getC6Keyword_1_6_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_Expression_VariableNameParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}
	}

}

// "C8"
protected class Statement_C8Keyword_1_6_0_1 extends KeywordToken  {

	public Statement_C8Keyword_1_6_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementAccess().getC8Keyword_1_6_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_C6Keyword_1_6_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

}


// {Expression_Not_Greater.left=current}
protected class Statement_Expression_Not_GreaterLeftAction_1_6_1 extends ActionToken  {

	public Statement_Expression_Not_GreaterLeftAction_1_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStatementAccess().getExpression_Not_GreaterLeftAction_1_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Group_1_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// right=Expression_VariableName
protected class Statement_RightAssignment_1_6_2 extends AssignmentToken  {

	public Statement_RightAssignment_1_6_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementAccess().getRightAssignment_1_6_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_VariableName_VariableAssignment(this, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpression_VariableNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementAccess().getRightExpression_VariableNameParserRuleCall_1_6_2_0();
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Statement_Expression_Not_GreaterLeftAction_1_6_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}
	}
}




/************ end Rule Statement ****************/


/************ begin Rule Expression_VariableName ****************
 *
 * Expression_VariableName:
 * 	variable=NVariableAccess;
 *
 **/

// variable=NVariableAccess
protected class Expression_VariableName_VariableAssignment extends AssignmentToken  {

	public Expression_VariableName_VariableAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}

	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExpression_VariableNameAccess().getVariableAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NVariableAccess_VariableAssignment(this, this, 0, inst);
			default: return null;
		}
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExpression_VariableNameRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("variable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("variable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNVariableAccessRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExpression_VariableNameAccess().getVariableNVariableAccessParserRuleCall_0();
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}
	}
}

/************ end Rule Expression_VariableName ****************/

}
