/*
* generated by Xtext
*/

package org.eclipse.xtext.parser.antlr.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.parser.antlr.services.Bug301935TestLanguageGrammarAccess;

@Singleton
public class Bug301935ExTestLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DelegateModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DelegateModel");
		private final RuleCall cModelParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DelegateModel returns Model:
		//	Model;
		public ParserRule getRule() { return rule; }

		//Model
		public RuleCall getModelParserRuleCall() { return cModelParserRuleCall; }
	}
	
	
	private DelegateModelElements pDelegateModel;
	
	private final Grammar grammar;

	private Bug301935TestLanguageGrammarAccess gaBug301935TestLanguage;

	@Inject
	public Bug301935ExTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		Bug301935TestLanguageGrammarAccess gaBug301935TestLanguage) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaBug301935TestLanguage = gaBug301935TestLanguage;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.parser.antlr.Bug301935ExTestLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public Bug301935TestLanguageGrammarAccess getBug301935TestLanguageGrammarAccess() {
		return gaBug301935TestLanguage;
	}

	
	//DelegateModel returns Model:
	//	Model;
	public DelegateModelElements getDelegateModelAccess() {
		return (pDelegateModel != null) ? pDelegateModel : (pDelegateModel = new DelegateModelElements());
	}
	
	public ParserRule getDelegateModelRule() {
		return getDelegateModelAccess().getRule();
	}

	//Model:
	//	name=ID WS value=ID NL value2=ID WS;
	public Bug301935TestLanguageGrammarAccess.ModelElements getModelAccess() {
		return gaBug301935TestLanguage.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//NL:
	//	WS* ("\r"? "\n") WS*;
	public Bug301935TestLanguageGrammarAccess.NLElements getNLAccess() {
		return gaBug301935TestLanguage.getNLAccess();
	}
	
	public ParserRule getNLRule() {
		return getNLAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaBug301935TestLanguage.getIDRule();
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return gaBug301935TestLanguage.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaBug301935TestLanguage.getANY_OTHERRule();
	} 
}
