/*
* generated by Xtext
*/
package org.eclipse.xtext.metamodelreferencing.tests.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.xtext.metamodelreferencing.tests.services.EcoreReferenceTestLanguageGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class EcoreReferenceTestLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private EcoreReferenceTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			case 1: return new ExtendsNsURIEObject_Group(this, this, 1, inst);
			case 2: return new MyEAttribute_Group(this, this, 2, inst);
			case 3: return new EAttribute_Group(this, this, 3, inst);
			case 4: return new ExtendsPluginEObject_Group(this, this, 4, inst);
			case 5: return new Unused_01_Group(this, this, 5, inst);
			case 6: return new Unused_02_Group(this, this, 6, inst);
			case 7: return new Unused_03_Group(this, this, 7, inst);
			case 8: return new ExtendsResourceEObject_Group(this, this, 8, inst);
			case 9: return new EObject_Group(this, this, 9, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 * 	extends+=ExtendsNsURIEObject extends+=ExtendsPluginEObject extends+=ExtendsResourceEObject;
 *
 **/

// extends+=ExtendsNsURIEObject extends+=ExtendsPluginEObject extends+=ExtendsResourceEObject
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_ExtendsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getModelRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// extends+=ExtendsNsURIEObject
protected class Model_ExtendsAssignment_0 extends AssignmentToken  {
	
	public Model_ExtendsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getExtendsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extends",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsNsURIEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getExtendsExtendsNsURIEObjectParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// extends+=ExtendsPluginEObject
protected class Model_ExtendsAssignment_1 extends AssignmentToken  {
	
	public Model_ExtendsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getExtendsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extends",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsPluginEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getExtendsExtendsPluginEObjectParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_ExtendsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// extends+=ExtendsResourceEObject
protected class Model_ExtendsAssignment_2 extends AssignmentToken  {
	
	public Model_ExtendsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getExtendsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extends",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsResourceEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getExtendsExtendsResourceEObjectParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_ExtendsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Model ****************/


/************ begin Rule ExtendsNsURIEObject ****************
 *
 * ExtendsNsURIEObject:
 * 	"ExtendsNsURIEObject" name=ValidID ("EObject" eObjectReference1=[EObject] | "ExtendsNsURIEObject"
 * 	eObjectReference1=[ExtendsNsURIEObject] | "ExtendsPluginEObject" eObjectReference1=[ExtendsPluginEObject] |
 * 	"ExtendsResourceEObject" eObjectReference1=[ExtendsResourceEObject]) ("ExtendsPluginEObject"
 * 	eAttributeReference=[MyEAttribute] eObjectReference2=[ExtendsNsURIEObject] eObjectReference3=[ExtendsPluginEObject]
 * 	eObjectReference4=[ExtendsResourceEObject] eObjectContainment+=ExtendsNsURIEObject?
 * 	eObjectContainment+=ExtendsPluginEObject? eObjectContainment+=ExtendsResourceEObject? eObjectContainment+=EObject
 * 	eObjectContainment+=EAttribute eObjectContainment+=MyEAttribute)?;
 *
 **/

// "ExtendsNsURIEObject" name=ValidID ("EObject" eObjectReference1=[EObject] | "ExtendsNsURIEObject"
// eObjectReference1=[ExtendsNsURIEObject] | "ExtendsPluginEObject" eObjectReference1=[ExtendsPluginEObject] |
// "ExtendsResourceEObject" eObjectReference1=[ExtendsResourceEObject]) ("ExtendsPluginEObject"
// eAttributeReference=[MyEAttribute] eObjectReference2=[ExtendsNsURIEObject] eObjectReference3=[ExtendsPluginEObject]
// eObjectReference4=[ExtendsResourceEObject] eObjectContainment+=ExtendsNsURIEObject?
// eObjectContainment+=ExtendsPluginEObject? eObjectContainment+=ExtendsResourceEObject? eObjectContainment+=EObject
// eObjectContainment+=EAttribute eObjectContainment+=MyEAttribute)?
protected class ExtendsNsURIEObject_Group extends GroupToken {
	
	public ExtendsNsURIEObject_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExtendsNsURIEObject_Alternatives_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExtendsNsURIEObjectRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "ExtendsNsURIEObject"
protected class ExtendsNsURIEObject_ExtendsNsURIEObjectKeyword_0 extends KeywordToken  {
	
	public ExtendsNsURIEObject_ExtendsNsURIEObjectKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getExtendsNsURIEObjectKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ValidID
protected class ExtendsNsURIEObject_NameAssignment_1 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_ExtendsNsURIEObjectKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExtendsNsURIEObjectAccess().getNameValidIDParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getExtendsNsURIEObjectAccess().getNameValidIDParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "EObject" eObjectReference1=[EObject] | "ExtendsNsURIEObject" eObjectReference1=[ExtendsNsURIEObject] |
// "ExtendsPluginEObject" eObjectReference1=[ExtendsPluginEObject] | "ExtendsResourceEObject"
// eObjectReference1=[ExtendsResourceEObject]
protected class ExtendsNsURIEObject_Alternatives_2 extends AlternativesToken {

	public ExtendsNsURIEObject_Alternatives_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_Group_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExtendsNsURIEObject_Group_2_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ExtendsNsURIEObject_Group_2_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ExtendsNsURIEObject_Group_2_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// "EObject" eObjectReference1=[EObject]
protected class ExtendsNsURIEObject_Group_2_0 extends GroupToken {
	
	public ExtendsNsURIEObject_Group_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getGroup_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EObjectReference1Assignment_2_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "EObject"
protected class ExtendsNsURIEObject_EObjectKeyword_2_0_0 extends KeywordToken  {
	
	public ExtendsNsURIEObject_EObjectKeyword_2_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEObjectKeyword_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eObjectReference1=[EObject]
protected class ExtendsNsURIEObject_EObjectReference1Assignment_2_0_1 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_EObjectReference1Assignment_2_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference1Assignment_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EObjectKeyword_2_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference1EObjectCrossReference_2_0_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference1EObjectCrossReference_2_0_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "ExtendsNsURIEObject" eObjectReference1=[ExtendsNsURIEObject]
protected class ExtendsNsURIEObject_Group_2_1 extends GroupToken {
	
	public ExtendsNsURIEObject_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EObjectReference1Assignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ExtendsNsURIEObject"
protected class ExtendsNsURIEObject_ExtendsNsURIEObjectKeyword_2_1_0 extends KeywordToken  {
	
	public ExtendsNsURIEObject_ExtendsNsURIEObjectKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getExtendsNsURIEObjectKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eObjectReference1=[ExtendsNsURIEObject]
protected class ExtendsNsURIEObject_EObjectReference1Assignment_2_1_1 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_EObjectReference1Assignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference1Assignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_ExtendsNsURIEObjectKeyword_2_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference1ExtendsNsURIEObjectCrossReference_2_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference1ExtendsNsURIEObjectCrossReference_2_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "ExtendsPluginEObject" eObjectReference1=[ExtendsPluginEObject]
protected class ExtendsNsURIEObject_Group_2_2 extends GroupToken {
	
	public ExtendsNsURIEObject_Group_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EObjectReference1Assignment_2_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ExtendsPluginEObject"
protected class ExtendsNsURIEObject_ExtendsPluginEObjectKeyword_2_2_0 extends KeywordToken  {
	
	public ExtendsNsURIEObject_ExtendsPluginEObjectKeyword_2_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getExtendsPluginEObjectKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eObjectReference1=[ExtendsPluginEObject]
protected class ExtendsNsURIEObject_EObjectReference1Assignment_2_2_1 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_EObjectReference1Assignment_2_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference1Assignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_ExtendsPluginEObjectKeyword_2_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference1ExtendsPluginEObjectCrossReference_2_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference1ExtendsPluginEObjectCrossReference_2_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "ExtendsResourceEObject" eObjectReference1=[ExtendsResourceEObject]
protected class ExtendsNsURIEObject_Group_2_3 extends GroupToken {
	
	public ExtendsNsURIEObject_Group_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getGroup_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EObjectReference1Assignment_2_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ExtendsResourceEObject"
protected class ExtendsNsURIEObject_ExtendsResourceEObjectKeyword_2_3_0 extends KeywordToken  {
	
	public ExtendsNsURIEObject_ExtendsResourceEObjectKeyword_2_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getExtendsResourceEObjectKeyword_2_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eObjectReference1=[ExtendsResourceEObject]
protected class ExtendsNsURIEObject_EObjectReference1Assignment_2_3_1 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_EObjectReference1Assignment_2_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference1Assignment_2_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_ExtendsResourceEObjectKeyword_2_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference1ExtendsResourceEObjectCrossReference_2_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference1ExtendsResourceEObjectCrossReference_2_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



// ("ExtendsPluginEObject" eAttributeReference=[MyEAttribute] eObjectReference2=[ExtendsNsURIEObject]
// eObjectReference3=[ExtendsPluginEObject] eObjectReference4=[ExtendsResourceEObject]
// eObjectContainment+=ExtendsNsURIEObject? eObjectContainment+=ExtendsPluginEObject?
// eObjectContainment+=ExtendsResourceEObject? eObjectContainment+=EObject eObjectContainment+=EAttribute
// eObjectContainment+=MyEAttribute)?
protected class ExtendsNsURIEObject_Group_3 extends GroupToken {
	
	public ExtendsNsURIEObject_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EObjectContainmentAssignment_3_10(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ExtendsPluginEObject"
protected class ExtendsNsURIEObject_ExtendsPluginEObjectKeyword_3_0 extends KeywordToken  {
	
	public ExtendsNsURIEObject_ExtendsPluginEObjectKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getExtendsPluginEObjectKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_Alternatives_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eAttributeReference=[MyEAttribute]
protected class ExtendsNsURIEObject_EAttributeReferenceAssignment_3_1 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_EAttributeReferenceAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEAttributeReferenceAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_ExtendsPluginEObjectKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eAttributeReference",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eAttributeReference");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsNsURIEObjectAccess().getEAttributeReferenceMyEAttributeCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsNsURIEObjectAccess().getEAttributeReferenceMyEAttributeCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// eObjectReference2=[ExtendsNsURIEObject]
protected class ExtendsNsURIEObject_EObjectReference2Assignment_3_2 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_EObjectReference2Assignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference2Assignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EAttributeReferenceAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference2ExtendsNsURIEObjectCrossReference_3_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference2ExtendsNsURIEObjectCrossReference_3_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// eObjectReference3=[ExtendsPluginEObject]
protected class ExtendsNsURIEObject_EObjectReference3Assignment_3_3 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_EObjectReference3Assignment_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference3Assignment_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EObjectReference2Assignment_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference3",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference3");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference3ExtendsPluginEObjectCrossReference_3_3_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference3ExtendsPluginEObjectCrossReference_3_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// eObjectReference4=[ExtendsResourceEObject]
protected class ExtendsNsURIEObject_EObjectReference4Assignment_3_4 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_EObjectReference4Assignment_3_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference4Assignment_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EObjectReference3Assignment_3_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference4",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference4");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference4ExtendsResourceEObjectCrossReference_3_4_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsNsURIEObjectAccess().getEObjectReference4ExtendsResourceEObjectCrossReference_3_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// eObjectContainment+=ExtendsNsURIEObject?
protected class ExtendsNsURIEObject_EObjectContainmentAssignment_3_5 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_EObjectContainmentAssignment_3_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEObjectContainmentAssignment_3_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsNsURIEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsNsURIEObjectAccess().getEObjectContainmentExtendsNsURIEObjectParserRuleCall_3_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EObjectReference4Assignment_3_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=ExtendsPluginEObject?
protected class ExtendsNsURIEObject_EObjectContainmentAssignment_3_6 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_EObjectContainmentAssignment_3_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEObjectContainmentAssignment_3_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsPluginEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsNsURIEObjectAccess().getEObjectContainmentExtendsPluginEObjectParserRuleCall_3_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EObjectContainmentAssignment_3_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ExtendsNsURIEObject_EObjectReference4Assignment_3_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=ExtendsResourceEObject?
protected class ExtendsNsURIEObject_EObjectContainmentAssignment_3_7 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_EObjectContainmentAssignment_3_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEObjectContainmentAssignment_3_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsResourceEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsNsURIEObjectAccess().getEObjectContainmentExtendsResourceEObjectParserRuleCall_3_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EObjectContainmentAssignment_3_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ExtendsNsURIEObject_EObjectContainmentAssignment_3_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ExtendsNsURIEObject_EObjectReference4Assignment_3_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=EObject
protected class ExtendsNsURIEObject_EObjectContainmentAssignment_3_8 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_EObjectContainmentAssignment_3_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEObjectContainmentAssignment_3_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsNsURIEObjectAccess().getEObjectContainmentEObjectParserRuleCall_3_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EObjectContainmentAssignment_3_7(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ExtendsNsURIEObject_EObjectContainmentAssignment_3_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ExtendsNsURIEObject_EObjectContainmentAssignment_3_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new ExtendsNsURIEObject_EObjectReference4Assignment_3_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=EAttribute
protected class ExtendsNsURIEObject_EObjectContainmentAssignment_3_9 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_EObjectContainmentAssignment_3_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEObjectContainmentAssignment_3_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EAttribute_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEAttributeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsNsURIEObjectAccess().getEObjectContainmentEAttributeParserRuleCall_3_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EObjectContainmentAssignment_3_8(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=MyEAttribute
protected class ExtendsNsURIEObject_EObjectContainmentAssignment_3_10 extends AssignmentToken  {
	
	public ExtendsNsURIEObject_EObjectContainmentAssignment_3_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsNsURIEObjectAccess().getEObjectContainmentAssignment_3_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MyEAttribute_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMyEAttributeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsNsURIEObjectAccess().getEObjectContainmentMyEAttributeParserRuleCall_3_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsNsURIEObject_EObjectContainmentAssignment_3_9(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ExtendsNsURIEObject ****************/


/************ begin Rule MyEAttribute ****************
 *
 * MyEAttribute:
 * 	{MyEAttribute} "MyEAttribute";
 *
 **/

// {MyEAttribute} "MyEAttribute"
protected class MyEAttribute_Group extends GroupToken {
	
	public MyEAttribute_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMyEAttributeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MyEAttribute_MyEAttributeKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMyEAttributeAccess().getMyEAttributeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {MyEAttribute}
protected class MyEAttribute_MyEAttributeAction_0 extends ActionToken  {

	public MyEAttribute_MyEAttributeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMyEAttributeAccess().getMyEAttributeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "MyEAttribute"
protected class MyEAttribute_MyEAttributeKeyword_1 extends KeywordToken  {
	
	public MyEAttribute_MyEAttributeKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMyEAttributeAccess().getMyEAttributeKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MyEAttribute_MyEAttributeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule MyEAttribute ****************/


/************ begin Rule EAttribute ****************
 *
 * EAttribute:
 * 	{EAttribute} "EAttribute";
 *
 **/

// {EAttribute} "EAttribute"
protected class EAttribute_Group extends GroupToken {
	
	public EAttribute_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEAttributeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EAttribute_EAttributeKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEAttributeAccess().getEAttributeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {EAttribute}
protected class EAttribute_EAttributeAction_0 extends ActionToken  {

	public EAttribute_EAttributeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getEAttributeAccess().getEAttributeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "EAttribute"
protected class EAttribute_EAttributeKeyword_1 extends KeywordToken  {
	
	public EAttribute_EAttributeKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEAttributeAccess().getEAttributeKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EAttribute_EAttributeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule EAttribute ****************/


/************ begin Rule ExtendsPluginEObject ****************
 *
 * ExtendsPluginEObject:
 * 	"ExtendsPluginEObject" name=ValidID ("EObject" eObjectReference1=[EObject] | "ExtendsNsURIEObject"
 * 	eObjectReference1=[ExtendsNsURIEObject] | "ExtendsPluginEObject" eObjectReference1=[ExtendsPluginEObject] |
 * 	"ExtendsResourceEObject" eObjectReference1=[ExtendsResourceEObject]) ("ExtendsPluginEObject"
 * 	eObjectReference2=[ExtendsNsURIEObject] eObjectReference3=[ExtendsPluginEObject]
 * 	eObjectReference4=[ExtendsResourceEObject] eObjectContainment+=ExtendsNsURIEObject?
 * 	eObjectContainment+=ExtendsPluginEObject? eObjectContainment+=ExtendsResourceEObject? eObjectContainment+=EObject
 * 	eObjectContainment+=EAttribute eObjectContainment+=MyEAttribute)?;
 *
 **/

// "ExtendsPluginEObject" name=ValidID ("EObject" eObjectReference1=[EObject] | "ExtendsNsURIEObject"
// eObjectReference1=[ExtendsNsURIEObject] | "ExtendsPluginEObject" eObjectReference1=[ExtendsPluginEObject] |
// "ExtendsResourceEObject" eObjectReference1=[ExtendsResourceEObject]) ("ExtendsPluginEObject"
// eObjectReference2=[ExtendsNsURIEObject] eObjectReference3=[ExtendsPluginEObject]
// eObjectReference4=[ExtendsResourceEObject] eObjectContainment+=ExtendsNsURIEObject?
// eObjectContainment+=ExtendsPluginEObject? eObjectContainment+=ExtendsResourceEObject? eObjectContainment+=EObject
// eObjectContainment+=EAttribute eObjectContainment+=MyEAttribute)?
protected class ExtendsPluginEObject_Group extends GroupToken {
	
	public ExtendsPluginEObject_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExtendsPluginEObject_Alternatives_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExtendsPluginEObjectRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "ExtendsPluginEObject"
protected class ExtendsPluginEObject_ExtendsPluginEObjectKeyword_0 extends KeywordToken  {
	
	public ExtendsPluginEObject_ExtendsPluginEObjectKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getExtendsPluginEObjectKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ValidID
protected class ExtendsPluginEObject_NameAssignment_1 extends AssignmentToken  {
	
	public ExtendsPluginEObject_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_ExtendsPluginEObjectKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExtendsPluginEObjectAccess().getNameValidIDParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getExtendsPluginEObjectAccess().getNameValidIDParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "EObject" eObjectReference1=[EObject] | "ExtendsNsURIEObject" eObjectReference1=[ExtendsNsURIEObject] |
// "ExtendsPluginEObject" eObjectReference1=[ExtendsPluginEObject] | "ExtendsResourceEObject"
// eObjectReference1=[ExtendsResourceEObject]
protected class ExtendsPluginEObject_Alternatives_2 extends AlternativesToken {

	public ExtendsPluginEObject_Alternatives_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_Group_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExtendsPluginEObject_Group_2_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ExtendsPluginEObject_Group_2_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ExtendsPluginEObject_Group_2_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// "EObject" eObjectReference1=[EObject]
protected class ExtendsPluginEObject_Group_2_0 extends GroupToken {
	
	public ExtendsPluginEObject_Group_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getGroup_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_EObjectReference1Assignment_2_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "EObject"
protected class ExtendsPluginEObject_EObjectKeyword_2_0_0 extends KeywordToken  {
	
	public ExtendsPluginEObject_EObjectKeyword_2_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getEObjectKeyword_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eObjectReference1=[EObject]
protected class ExtendsPluginEObject_EObjectReference1Assignment_2_0_1 extends AssignmentToken  {
	
	public ExtendsPluginEObject_EObjectReference1Assignment_2_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference1Assignment_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_EObjectKeyword_2_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference1EObjectCrossReference_2_0_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference1EObjectCrossReference_2_0_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "ExtendsNsURIEObject" eObjectReference1=[ExtendsNsURIEObject]
protected class ExtendsPluginEObject_Group_2_1 extends GroupToken {
	
	public ExtendsPluginEObject_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_EObjectReference1Assignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ExtendsNsURIEObject"
protected class ExtendsPluginEObject_ExtendsNsURIEObjectKeyword_2_1_0 extends KeywordToken  {
	
	public ExtendsPluginEObject_ExtendsNsURIEObjectKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getExtendsNsURIEObjectKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eObjectReference1=[ExtendsNsURIEObject]
protected class ExtendsPluginEObject_EObjectReference1Assignment_2_1_1 extends AssignmentToken  {
	
	public ExtendsPluginEObject_EObjectReference1Assignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference1Assignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_ExtendsNsURIEObjectKeyword_2_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference1ExtendsNsURIEObjectCrossReference_2_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference1ExtendsNsURIEObjectCrossReference_2_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "ExtendsPluginEObject" eObjectReference1=[ExtendsPluginEObject]
protected class ExtendsPluginEObject_Group_2_2 extends GroupToken {
	
	public ExtendsPluginEObject_Group_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_EObjectReference1Assignment_2_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ExtendsPluginEObject"
protected class ExtendsPluginEObject_ExtendsPluginEObjectKeyword_2_2_0 extends KeywordToken  {
	
	public ExtendsPluginEObject_ExtendsPluginEObjectKeyword_2_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getExtendsPluginEObjectKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eObjectReference1=[ExtendsPluginEObject]
protected class ExtendsPluginEObject_EObjectReference1Assignment_2_2_1 extends AssignmentToken  {
	
	public ExtendsPluginEObject_EObjectReference1Assignment_2_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference1Assignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_ExtendsPluginEObjectKeyword_2_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference1ExtendsPluginEObjectCrossReference_2_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference1ExtendsPluginEObjectCrossReference_2_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "ExtendsResourceEObject" eObjectReference1=[ExtendsResourceEObject]
protected class ExtendsPluginEObject_Group_2_3 extends GroupToken {
	
	public ExtendsPluginEObject_Group_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getGroup_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_EObjectReference1Assignment_2_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ExtendsResourceEObject"
protected class ExtendsPluginEObject_ExtendsResourceEObjectKeyword_2_3_0 extends KeywordToken  {
	
	public ExtendsPluginEObject_ExtendsResourceEObjectKeyword_2_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getExtendsResourceEObjectKeyword_2_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eObjectReference1=[ExtendsResourceEObject]
protected class ExtendsPluginEObject_EObjectReference1Assignment_2_3_1 extends AssignmentToken  {
	
	public ExtendsPluginEObject_EObjectReference1Assignment_2_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference1Assignment_2_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_ExtendsResourceEObjectKeyword_2_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference1ExtendsResourceEObjectCrossReference_2_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference1ExtendsResourceEObjectCrossReference_2_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



// ("ExtendsPluginEObject" eObjectReference2=[ExtendsNsURIEObject] eObjectReference3=[ExtendsPluginEObject]
// eObjectReference4=[ExtendsResourceEObject] eObjectContainment+=ExtendsNsURIEObject?
// eObjectContainment+=ExtendsPluginEObject? eObjectContainment+=ExtendsResourceEObject? eObjectContainment+=EObject
// eObjectContainment+=EAttribute eObjectContainment+=MyEAttribute)?
protected class ExtendsPluginEObject_Group_3 extends GroupToken {
	
	public ExtendsPluginEObject_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_EObjectContainmentAssignment_3_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ExtendsPluginEObject"
protected class ExtendsPluginEObject_ExtendsPluginEObjectKeyword_3_0 extends KeywordToken  {
	
	public ExtendsPluginEObject_ExtendsPluginEObjectKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getExtendsPluginEObjectKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_Alternatives_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eObjectReference2=[ExtendsNsURIEObject]
protected class ExtendsPluginEObject_EObjectReference2Assignment_3_1 extends AssignmentToken  {
	
	public ExtendsPluginEObject_EObjectReference2Assignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference2Assignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_ExtendsPluginEObjectKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference2ExtendsNsURIEObjectCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference2ExtendsNsURIEObjectCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// eObjectReference3=[ExtendsPluginEObject]
protected class ExtendsPluginEObject_EObjectReference3Assignment_3_2 extends AssignmentToken  {
	
	public ExtendsPluginEObject_EObjectReference3Assignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference3Assignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_EObjectReference2Assignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference3",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference3");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference3ExtendsPluginEObjectCrossReference_3_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference3ExtendsPluginEObjectCrossReference_3_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// eObjectReference4=[ExtendsResourceEObject]
protected class ExtendsPluginEObject_EObjectReference4Assignment_3_3 extends AssignmentToken  {
	
	public ExtendsPluginEObject_EObjectReference4Assignment_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference4Assignment_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_EObjectReference3Assignment_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference4",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference4");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference4ExtendsResourceEObjectCrossReference_3_3_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsPluginEObjectAccess().getEObjectReference4ExtendsResourceEObjectCrossReference_3_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// eObjectContainment+=ExtendsNsURIEObject?
protected class ExtendsPluginEObject_EObjectContainmentAssignment_3_4 extends AssignmentToken  {
	
	public ExtendsPluginEObject_EObjectContainmentAssignment_3_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getEObjectContainmentAssignment_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsNsURIEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsPluginEObjectAccess().getEObjectContainmentExtendsNsURIEObjectParserRuleCall_3_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsPluginEObject_EObjectReference4Assignment_3_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=ExtendsPluginEObject?
protected class ExtendsPluginEObject_EObjectContainmentAssignment_3_5 extends AssignmentToken  {
	
	public ExtendsPluginEObject_EObjectContainmentAssignment_3_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getEObjectContainmentAssignment_3_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsPluginEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsPluginEObjectAccess().getEObjectContainmentExtendsPluginEObjectParserRuleCall_3_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsPluginEObject_EObjectContainmentAssignment_3_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ExtendsPluginEObject_EObjectReference4Assignment_3_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=ExtendsResourceEObject?
protected class ExtendsPluginEObject_EObjectContainmentAssignment_3_6 extends AssignmentToken  {
	
	public ExtendsPluginEObject_EObjectContainmentAssignment_3_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getEObjectContainmentAssignment_3_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsResourceEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsPluginEObjectAccess().getEObjectContainmentExtendsResourceEObjectParserRuleCall_3_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsPluginEObject_EObjectContainmentAssignment_3_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ExtendsPluginEObject_EObjectContainmentAssignment_3_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ExtendsPluginEObject_EObjectReference4Assignment_3_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=EObject
protected class ExtendsPluginEObject_EObjectContainmentAssignment_3_7 extends AssignmentToken  {
	
	public ExtendsPluginEObject_EObjectContainmentAssignment_3_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getEObjectContainmentAssignment_3_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsPluginEObjectAccess().getEObjectContainmentEObjectParserRuleCall_3_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsPluginEObject_EObjectContainmentAssignment_3_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ExtendsPluginEObject_EObjectContainmentAssignment_3_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ExtendsPluginEObject_EObjectContainmentAssignment_3_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new ExtendsPluginEObject_EObjectReference4Assignment_3_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=EAttribute
protected class ExtendsPluginEObject_EObjectContainmentAssignment_3_8 extends AssignmentToken  {
	
	public ExtendsPluginEObject_EObjectContainmentAssignment_3_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getEObjectContainmentAssignment_3_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EAttribute_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEAttributeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsPluginEObjectAccess().getEObjectContainmentEAttributeParserRuleCall_3_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsPluginEObject_EObjectContainmentAssignment_3_7(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=MyEAttribute
protected class ExtendsPluginEObject_EObjectContainmentAssignment_3_9 extends AssignmentToken  {
	
	public ExtendsPluginEObject_EObjectContainmentAssignment_3_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsPluginEObjectAccess().getEObjectContainmentAssignment_3_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MyEAttribute_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMyEAttributeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsPluginEObjectAccess().getEObjectContainmentMyEAttributeParserRuleCall_3_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsPluginEObject_EObjectContainmentAssignment_3_8(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ExtendsPluginEObject ****************/


/************ begin Rule Unused_01 ****************
 *
 * Unused_01 returns ExtendsNsURIEObject:
 * 	{MyNamedElement_01} name=ValidID;
 *
 **/

// {MyNamedElement_01} name=ValidID
protected class Unused_01_Group extends GroupToken {
	
	public Unused_01_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnused_01Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unused_01_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnused_01Access().getMyNamedElement_01Action_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {MyNamedElement_01}
protected class Unused_01_MyNamedElement_01Action_0 extends ActionToken  {

	public Unused_01_MyNamedElement_01Action_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnused_01Access().getMyNamedElement_01Action_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=ValidID
protected class Unused_01_NameAssignment_1 extends AssignmentToken  {
	
	public Unused_01_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnused_01Access().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unused_01_MyNamedElement_01Action_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUnused_01Access().getNameValidIDParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getUnused_01Access().getNameValidIDParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Unused_01 ****************/


/************ begin Rule Unused_02 ****************
 *
 * Unused_02 returns ExtendsResourceEObject:
 * 	{MyNamedElement_02} name=ValidID;
 *
 **/

// {MyNamedElement_02} name=ValidID
protected class Unused_02_Group extends GroupToken {
	
	public Unused_02_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnused_02Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unused_02_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnused_02Access().getMyNamedElement_02Action_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {MyNamedElement_02}
protected class Unused_02_MyNamedElement_02Action_0 extends ActionToken  {

	public Unused_02_MyNamedElement_02Action_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnused_02Access().getMyNamedElement_02Action_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=ValidID
protected class Unused_02_NameAssignment_1 extends AssignmentToken  {
	
	public Unused_02_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnused_02Access().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unused_02_MyNamedElement_02Action_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUnused_02Access().getNameValidIDParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getUnused_02Access().getNameValidIDParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Unused_02 ****************/


/************ begin Rule Unused_03 ****************
 *
 * Unused_03 returns ExtendsPluginEObject:
 * 	{MyNamedElement_03} name=ValidID;
 *
 **/

// {MyNamedElement_03} name=ValidID
protected class Unused_03_Group extends GroupToken {
	
	public Unused_03_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnused_03Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unused_03_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnused_03Access().getMyNamedElement_03Action_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {MyNamedElement_03}
protected class Unused_03_MyNamedElement_03Action_0 extends ActionToken  {

	public Unused_03_MyNamedElement_03Action_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnused_03Access().getMyNamedElement_03Action_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=ValidID
protected class Unused_03_NameAssignment_1 extends AssignmentToken  {
	
	public Unused_03_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnused_03Access().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unused_03_MyNamedElement_03Action_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUnused_03Access().getNameValidIDParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getUnused_03Access().getNameValidIDParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Unused_03 ****************/


/************ begin Rule ExtendsResourceEObject ****************
 *
 * ExtendsResourceEObject:
 * 	"ExtendsResourceEObject" name=ValidID ("EObject" eObjectReference1=[EObject] | "ExtendsNsURIEObject"
 * 	eObjectReference1=[ExtendsNsURIEObject] | "ExtendsPluginEObject" eObjectReference1=[ExtendsPluginEObject] |
 * 	"ExtendsResourceEObject" eObjectReference1=[ExtendsResourceEObject]) ("ExtendsResourceEObject"
 * 	eObjectReference2=[ExtendsNsURIEObject] eObjectReference3=[ExtendsPluginEObject]
 * 	eObjectReference4=[ExtendsResourceEObject] eObjectContainment+=ExtendsNsURIEObject
 * 	eObjectContainment+=ExtendsPluginEObject eObjectContainment+=ExtendsResourceEObject eObjectContainment+=EObject
 * 	eObjectContainment+=EAttribute eObjectContainment+=MyEAttribute)?;
 *
 **/

// "ExtendsResourceEObject" name=ValidID ("EObject" eObjectReference1=[EObject] | "ExtendsNsURIEObject"
// eObjectReference1=[ExtendsNsURIEObject] | "ExtendsPluginEObject" eObjectReference1=[ExtendsPluginEObject] |
// "ExtendsResourceEObject" eObjectReference1=[ExtendsResourceEObject]) ("ExtendsResourceEObject"
// eObjectReference2=[ExtendsNsURIEObject] eObjectReference3=[ExtendsPluginEObject]
// eObjectReference4=[ExtendsResourceEObject] eObjectContainment+=ExtendsNsURIEObject
// eObjectContainment+=ExtendsPluginEObject eObjectContainment+=ExtendsResourceEObject eObjectContainment+=EObject
// eObjectContainment+=EAttribute eObjectContainment+=MyEAttribute)?
protected class ExtendsResourceEObject_Group extends GroupToken {
	
	public ExtendsResourceEObject_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExtendsResourceEObject_Alternatives_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExtendsResourceEObjectRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "ExtendsResourceEObject"
protected class ExtendsResourceEObject_ExtendsResourceEObjectKeyword_0 extends KeywordToken  {
	
	public ExtendsResourceEObject_ExtendsResourceEObjectKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getExtendsResourceEObjectKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ValidID
protected class ExtendsResourceEObject_NameAssignment_1 extends AssignmentToken  {
	
	public ExtendsResourceEObject_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_ExtendsResourceEObjectKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExtendsResourceEObjectAccess().getNameValidIDParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getExtendsResourceEObjectAccess().getNameValidIDParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "EObject" eObjectReference1=[EObject] | "ExtendsNsURIEObject" eObjectReference1=[ExtendsNsURIEObject] |
// "ExtendsPluginEObject" eObjectReference1=[ExtendsPluginEObject] | "ExtendsResourceEObject"
// eObjectReference1=[ExtendsResourceEObject]
protected class ExtendsResourceEObject_Alternatives_2 extends AlternativesToken {

	public ExtendsResourceEObject_Alternatives_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_Group_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExtendsResourceEObject_Group_2_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ExtendsResourceEObject_Group_2_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ExtendsResourceEObject_Group_2_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// "EObject" eObjectReference1=[EObject]
protected class ExtendsResourceEObject_Group_2_0 extends GroupToken {
	
	public ExtendsResourceEObject_Group_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getGroup_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_EObjectReference1Assignment_2_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "EObject"
protected class ExtendsResourceEObject_EObjectKeyword_2_0_0 extends KeywordToken  {
	
	public ExtendsResourceEObject_EObjectKeyword_2_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getEObjectKeyword_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eObjectReference1=[EObject]
protected class ExtendsResourceEObject_EObjectReference1Assignment_2_0_1 extends AssignmentToken  {
	
	public ExtendsResourceEObject_EObjectReference1Assignment_2_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference1Assignment_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_EObjectKeyword_2_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference1EObjectCrossReference_2_0_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference1EObjectCrossReference_2_0_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "ExtendsNsURIEObject" eObjectReference1=[ExtendsNsURIEObject]
protected class ExtendsResourceEObject_Group_2_1 extends GroupToken {
	
	public ExtendsResourceEObject_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_EObjectReference1Assignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ExtendsNsURIEObject"
protected class ExtendsResourceEObject_ExtendsNsURIEObjectKeyword_2_1_0 extends KeywordToken  {
	
	public ExtendsResourceEObject_ExtendsNsURIEObjectKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getExtendsNsURIEObjectKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eObjectReference1=[ExtendsNsURIEObject]
protected class ExtendsResourceEObject_EObjectReference1Assignment_2_1_1 extends AssignmentToken  {
	
	public ExtendsResourceEObject_EObjectReference1Assignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference1Assignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_ExtendsNsURIEObjectKeyword_2_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference1ExtendsNsURIEObjectCrossReference_2_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference1ExtendsNsURIEObjectCrossReference_2_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "ExtendsPluginEObject" eObjectReference1=[ExtendsPluginEObject]
protected class ExtendsResourceEObject_Group_2_2 extends GroupToken {
	
	public ExtendsResourceEObject_Group_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_EObjectReference1Assignment_2_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ExtendsPluginEObject"
protected class ExtendsResourceEObject_ExtendsPluginEObjectKeyword_2_2_0 extends KeywordToken  {
	
	public ExtendsResourceEObject_ExtendsPluginEObjectKeyword_2_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getExtendsPluginEObjectKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eObjectReference1=[ExtendsPluginEObject]
protected class ExtendsResourceEObject_EObjectReference1Assignment_2_2_1 extends AssignmentToken  {
	
	public ExtendsResourceEObject_EObjectReference1Assignment_2_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference1Assignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_ExtendsPluginEObjectKeyword_2_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference1ExtendsPluginEObjectCrossReference_2_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference1ExtendsPluginEObjectCrossReference_2_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "ExtendsResourceEObject" eObjectReference1=[ExtendsResourceEObject]
protected class ExtendsResourceEObject_Group_2_3 extends GroupToken {
	
	public ExtendsResourceEObject_Group_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getGroup_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_EObjectReference1Assignment_2_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ExtendsResourceEObject"
protected class ExtendsResourceEObject_ExtendsResourceEObjectKeyword_2_3_0 extends KeywordToken  {
	
	public ExtendsResourceEObject_ExtendsResourceEObjectKeyword_2_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getExtendsResourceEObjectKeyword_2_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eObjectReference1=[ExtendsResourceEObject]
protected class ExtendsResourceEObject_EObjectReference1Assignment_2_3_1 extends AssignmentToken  {
	
	public ExtendsResourceEObject_EObjectReference1Assignment_2_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference1Assignment_2_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_ExtendsResourceEObjectKeyword_2_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference1ExtendsResourceEObjectCrossReference_2_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference1ExtendsResourceEObjectCrossReference_2_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



// ("ExtendsResourceEObject" eObjectReference2=[ExtendsNsURIEObject] eObjectReference3=[ExtendsPluginEObject]
// eObjectReference4=[ExtendsResourceEObject] eObjectContainment+=ExtendsNsURIEObject
// eObjectContainment+=ExtendsPluginEObject eObjectContainment+=ExtendsResourceEObject eObjectContainment+=EObject
// eObjectContainment+=EAttribute eObjectContainment+=MyEAttribute)?
protected class ExtendsResourceEObject_Group_3 extends GroupToken {
	
	public ExtendsResourceEObject_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_EObjectContainmentAssignment_3_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ExtendsResourceEObject"
protected class ExtendsResourceEObject_ExtendsResourceEObjectKeyword_3_0 extends KeywordToken  {
	
	public ExtendsResourceEObject_ExtendsResourceEObjectKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getExtendsResourceEObjectKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_Alternatives_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eObjectReference2=[ExtendsNsURIEObject]
protected class ExtendsResourceEObject_EObjectReference2Assignment_3_1 extends AssignmentToken  {
	
	public ExtendsResourceEObject_EObjectReference2Assignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference2Assignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_ExtendsResourceEObjectKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference2ExtendsNsURIEObjectCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference2ExtendsNsURIEObjectCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// eObjectReference3=[ExtendsPluginEObject]
protected class ExtendsResourceEObject_EObjectReference3Assignment_3_2 extends AssignmentToken  {
	
	public ExtendsResourceEObject_EObjectReference3Assignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference3Assignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_EObjectReference2Assignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference3",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference3");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference3ExtendsPluginEObjectCrossReference_3_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference3ExtendsPluginEObjectCrossReference_3_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// eObjectReference4=[ExtendsResourceEObject]
protected class ExtendsResourceEObject_EObjectReference4Assignment_3_3 extends AssignmentToken  {
	
	public ExtendsResourceEObject_EObjectReference4Assignment_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference4Assignment_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_EObjectReference3Assignment_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectReference4",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectReference4");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference4ExtendsResourceEObjectCrossReference_3_3_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExtendsResourceEObjectAccess().getEObjectReference4ExtendsResourceEObjectCrossReference_3_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// eObjectContainment+=ExtendsNsURIEObject
protected class ExtendsResourceEObject_EObjectContainmentAssignment_3_4 extends AssignmentToken  {
	
	public ExtendsResourceEObject_EObjectContainmentAssignment_3_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getEObjectContainmentAssignment_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsNsURIEObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsNsURIEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsResourceEObjectAccess().getEObjectContainmentExtendsNsURIEObjectParserRuleCall_3_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsResourceEObject_EObjectReference4Assignment_3_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=ExtendsPluginEObject
protected class ExtendsResourceEObject_EObjectContainmentAssignment_3_5 extends AssignmentToken  {
	
	public ExtendsResourceEObject_EObjectContainmentAssignment_3_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getEObjectContainmentAssignment_3_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsPluginEObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsPluginEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsResourceEObjectAccess().getEObjectContainmentExtendsPluginEObjectParserRuleCall_3_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsResourceEObject_EObjectContainmentAssignment_3_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=ExtendsResourceEObject
protected class ExtendsResourceEObject_EObjectContainmentAssignment_3_6 extends AssignmentToken  {
	
	public ExtendsResourceEObject_EObjectContainmentAssignment_3_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getEObjectContainmentAssignment_3_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendsResourceEObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendsResourceEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsResourceEObjectAccess().getEObjectContainmentExtendsResourceEObjectParserRuleCall_3_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsResourceEObject_EObjectContainmentAssignment_3_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=EObject
protected class ExtendsResourceEObject_EObjectContainmentAssignment_3_7 extends AssignmentToken  {
	
	public ExtendsResourceEObject_EObjectContainmentAssignment_3_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getEObjectContainmentAssignment_3_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EObject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEObjectRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsResourceEObjectAccess().getEObjectContainmentEObjectParserRuleCall_3_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsResourceEObject_EObjectContainmentAssignment_3_6(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=EAttribute
protected class ExtendsResourceEObject_EObjectContainmentAssignment_3_8 extends AssignmentToken  {
	
	public ExtendsResourceEObject_EObjectContainmentAssignment_3_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getEObjectContainmentAssignment_3_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EAttribute_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEAttributeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsResourceEObjectAccess().getEObjectContainmentEAttributeParserRuleCall_3_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsResourceEObject_EObjectContainmentAssignment_3_7(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// eObjectContainment+=MyEAttribute
protected class ExtendsResourceEObject_EObjectContainmentAssignment_3_9 extends AssignmentToken  {
	
	public ExtendsResourceEObject_EObjectContainmentAssignment_3_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendsResourceEObjectAccess().getEObjectContainmentAssignment_3_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MyEAttribute_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eObjectContainment",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eObjectContainment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMyEAttributeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendsResourceEObjectAccess().getEObjectContainmentMyEAttributeParserRuleCall_3_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendsResourceEObject_EObjectContainmentAssignment_3_8(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ExtendsResourceEObject ****************/


/************ begin Rule EObject ****************
 *
 * EObject:
 * 	{EObject} "object";
 *
 **/

// {EObject} "object"
protected class EObject_Group extends GroupToken {
	
	public EObject_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEObjectAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EObject_ObjectKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEObjectAccess().getEObjectAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {EObject}
protected class EObject_EObjectAction_0 extends ActionToken  {

	public EObject_EObjectAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getEObjectAccess().getEObjectAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "object"
protected class EObject_ObjectKeyword_1 extends KeywordToken  {
	
	public EObject_ObjectKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEObjectAccess().getObjectKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EObject_EObjectAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule EObject ****************/


}
