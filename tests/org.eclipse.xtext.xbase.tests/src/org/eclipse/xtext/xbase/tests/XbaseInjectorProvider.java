/*
* generated by Xtext
*/
package org.eclipse.xtext.xbase.tests;

import org.eclipse.xtext.common.types.access.IJvmTypeProvider;
import org.eclipse.xtext.junit4.GlobalRegistries;
import org.eclipse.xtext.junit4.GlobalRegistries.GlobalStateMemento;
import org.eclipse.xtext.junit4.IInjectorProvider;
import org.eclipse.xtext.junit4.IRegistryConfigurator;
import org.eclipse.xtext.resource.SynchronizedXtextResourceSet;
import org.eclipse.xtext.xbase.XbaseRuntimeModule;
import org.eclipse.xtext.xbase.XbaseStandaloneSetup;

import com.google.inject.Guice;
import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

/**
 * An injector provider for plain Xbase tests.
 * 
 * @author Sebastian Zarnekow - Initial contribution and API
 */
public class XbaseInjectorProvider implements IInjectorProvider, IRegistryConfigurator {

	protected GlobalStateMemento stateBeforeInjectorCreation;
	protected GlobalStateMemento stateAfterInjectorCreation;
	protected Injector injector;

	static {
		GlobalRegistries.initializeDefaults();
	}

	public Injector getInjector() {
		if (injector == null) {
			stateBeforeInjectorCreation = GlobalRegistries.makeCopyOfGlobalState();
			this.injector = internalCreateInjector();
			stateAfterInjectorCreation = GlobalRegistries.makeCopyOfGlobalState();
		}
		return injector;
	}

	protected Injector internalCreateInjector() {
		return new XbaseTestStandaloneSetup().createInjectorAndDoEMFRegistration();
	}

	public void restoreRegistry() {
		stateBeforeInjectorCreation.restoreGlobalState();
	}

	public void setupRegistry() {
		getInjector();
		stateAfterInjectorCreation.restoreGlobalState();
	}

	public static class SynchronizedXtextResourceSetProvider implements Provider<SynchronizedXtextResourceSet> {

		@Inject
		private ClassLoader classLoader;

		@Inject
		private IJvmTypeProvider.Factory typeProviderFactory;

		public SynchronizedXtextResourceSet get() {
			SynchronizedXtextResourceSet result = new SynchronizedXtextResourceSet();
			result.setClasspathURIContext(classLoader);
			typeProviderFactory.findOrCreateTypeProvider(result);
			return result;
		}

	}

	public static class XbaseTestStandaloneSetup extends XbaseStandaloneSetup {

		@Override
		public Injector createInjector() {
			return Guice.createInjector(new XbaseTestRuntimeModule());
		}
	}

	public static class XbaseTestRuntimeModule extends XbaseRuntimeModule {
		@Override
		public ClassLoader bindClassLoaderToInstance() {
			return AbstractXbaseTestCase.class.getClassLoader();
		}

		public Class<? extends Provider<SynchronizedXtextResourceSet>> provideSynchronizedResourceSet() {
			return SynchronizedXtextResourceSetProvider.class;
		}
	}

}
