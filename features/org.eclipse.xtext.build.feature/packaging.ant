<?xml version="1.0" encoding="UTF-8"?>
<project name="Packaging">
	<target name="create.target.platform.metadata">
		<buckminster.targetPlatformLocation property="target.platform.location" />
		<property name="target.platform.repository" value="file:/${sp:output}" />
		<p2.publish.featuresAndBundles metadataRepository="${target.platform.repository}" source="${target.platform.location}" publishArtifacts="false" />
		<buckminster.publishJRE metadataRepository="${target.platform.repository}" publishArtifacts="false" />
	</target>

	<target name="-define.package.qualifier">
		<property name="incubation.qualifier" value="" />
		<!-- if the build id starts with S or R build.stable property will be set -->
		<condition property="build.stable" value="true">
			<matches string="${build.id}" pattern="[S|R](d)*" />
		</condition>

		<!-- if the build.alias is non-empty then use it in preference -->
		<condition property="package.qualifier" value="${incubation.qualifier}-${build.alias}">
			<and>
				<isset property="build.alias" />
				<length string="${build.alias}" when="greater" length="0" />
			</and>
		</condition>
		<!-- otherwise use the build.id if defined, if not then fall back to an empty string -->
		<condition property="package.qualifier" value="${incubation.qualifier}-${build.id}" else="${incubation.qualifier}">
			<and>
				<isset property="build.id" />
				<length string="${build.id}" when="greater" length="0" />
			</and>
		</condition>
	</target>

	<!-- Modify category xml (replace package qualifier) -->
	<target name="-create.category.xml" depends="-define.package.qualifier">
		<loadfile property="modifiedCategoryXml" srcFile="category.xml.template">
			<filterchain>
				<expandproperties />
			</filterchain>
		</loadfile>
		<echo file="category.xml">${modifiedCategoryXml}</echo>
	</target>


	<target name="package.site" depends="-define.package.qualifier">
		<mkdir dir="${sp:output}" />
		<!-- create the desired ZIP file -->
		<antcall target="-statistic.add" inheritall="true" />
		<zip basedir="${sp:repository}" destfile="${sp:output}/${package.name}${package.qualifier}.zip" />
	</target>


	<!-- Appends p2 download statistic data to the artifacts.xml-->
	<target name="-statistic.add" if="build.stable">
		<echo>Stable build ${build.id} - adding statistic data</echo>
		<property name="repository.root" value="${sp:repository}" />
		<property name="qualifier" value="${package.qualifier}" />
		<ant antfile="statistics/statistics.ant" target="addStatistic" inheritall="true" />
	</target>

	<target name="-locate.launcher.jar" unless="launcher.jar">
		<pathconvert property="launcher.jar">
			<first count="1">
				<sort>
					<fileset dir="${eclipse.home}/plugins" includes="**/org.eclipse.equinox.launcher_*.jar" />
					<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
						<date />
					</reverse>
				</sort>
			</first>
		</pathconvert>
	</target>

	<target name="-define.common.properties" depends="-locate.launcher.jar">
		<buckminster.targetPlatformLocation property="target.platform.location" />
		<property name="target.platform.bundle.pool" value="file:/${target.platform.location}" />

		<condition property="wildcard" value="&quot;*&quot;" else="*">
			<os family="windows" />
		</condition>
	</target>

	<target name="-install.prerequisite.ius" depends="-define.common.properties" if="prerequisite.ius">
		<condition property="bundle.pools.for.prerequisites" value="${target.platform.bundle.pool}|file:/${sp:prerequisites.base}" else="${target.platform.bundle.pool}">
			<isset property="sp:prerequisites.base" />
		</condition>
		<property name="bundle.pools.for.install" value="${target.platform.bundle.pool}|file:/${prerequisites.destination}" />

		<delete dir="${prerequisites.destination}" />

		<!--
		  install the specified prerequisite IUs (which are not to be included
		  in the final install) in a separate directory
		-->
		<java jar="${launcher.jar}" fork="true" failonerror="true">
			<arg value="-consolelog" />
			<arg value="-application" />
			<arg value="org.eclipse.equinox.p2.director" />
			<arg value="-repository" />
			<arg value="file:/${sp:repository}" />
			<arg value="-metadataRepository" />
			<arg value="file:/${sp:target.platform.repository}" />
			<arg value="-destination" />
			<arg value="${prerequisites.destination}" />
			<arg value="-profile" />
			<arg value="Prerequisites" />
			<arg value="-profileproperties" />
			<arg value="org.eclipse.equinox.p2.cache.extensions=${bundle.pools.for.prerequisites},org.eclipse.update.install.features=true" />
			<arg value="-installIU" />
			<arg value="${prerequisite.ius}" />
			<arg value="-p2.os" />
			<arg value="${wildcard}" />
			<arg value="-p2.ws" />
			<arg value="${wildcard}" />
			<arg value="-p2.arch" />
			<arg value="${wildcard}" />
		</java>

		<!--
		  remove the p2 metadata, as the prerequisites install location is only meant
		  to be used as a secondary bundle pool during the install of the required IUs
		-->
		<delete dir="${prerequisites.destination}" includeEmptyDirs="true">
			<include name="p2/**" />
		</delete>
	</target>

	<target name="-install.content.ius" depends="-install.prerequisite.ius">
		<!-- this may have already been defined in the -install.prerequisite.ius target (if it ran) -->
		<property name="bundle.pools.for.install" value="${target.platform.bundle.pool}" />

		<delete dir="${install.destination}" />

		<!--
		  install the required IUs, referencing the target plaform and potetially also the prerequisite
		  install location as secondary bundle pools so that only the desired components are installed
		  in the install destination directory
		-->
		<java jar="${launcher.jar}" fork="true" resultproperty="director.result" outputproperty="director.output">
			<arg value="-consolelog" />
			<arg value="-application" />
			<arg value="org.eclipse.equinox.p2.director" />
			<arg value="-repository" />
			<arg value="file:/${sp:repository}" />
			<arg value="-metadataRepository" />
			<arg value="file:/${sp:target.platform.repository}" />
			<arg value="-destination" />
			<arg value="${install.destination}" />
			<arg value="-profile" />
			<arg value="Install" />
			<arg value="-profileproperties" />
			<arg value="org.eclipse.equinox.p2.cache.extensions=${bundle.pools.for.install},org.eclipse.update.install.features=true" />
			<arg value="-installIU" />
			<arg value="${content.ius}" />
			<arg value="-p2.os" />
			<arg value="${wildcard}" />
			<arg value="-p2.ws" />
			<arg value="${wildcard}" />
			<arg value="-p2.arch" />
			<arg value="${wildcard}" />
		</java>
		
		<condition property="director.failed">
			<not>
				<equals arg1="${director.result}" arg2="0"/>
			</not>
		</condition>
	
		<antcall target="-check.director.result" inheritall="true"/>
		
		<!-- remove the p2 metadata, so that the installation of target platform IUs is not confused -->
		<delete dir="${install.destination}" includeEmptyDirs="true">
			<include name="p2/**" />
		</delete>
	</target>
	
	<target name="-check.director.result" if="director.failed">
		<echo>${director.output}</echo>
		<fail message="p2 Director execution failed."/>
	</target>
	
	<target name="-install.ius" depends="-install.content.ius" if="target.platform.ius">
		<!--
		  install the specified TP IUs
		-->
		<java jar="${launcher.jar}" fork="true" failonerror="true">
			<arg value="-consolelog" />
			<arg value="-application" />
			<arg value="org.eclipse.equinox.p2.director" />
			<arg value="-metadataRepository" />
			<arg value="file:/${sp:target.platform.repository}" />
			<arg value="-artifactRepository" />
			<arg value="${target.platform.bundle.pool}" />
			<arg value="-destination" />
			<arg value="${install.destination}" />
			<arg value="-profile" />
			<arg value="Install" />
			<arg value="-profileproperties" />
			<arg value="org.eclipse.update.install.features=true" />
			<arg value="-installIU" />
			<arg value="${target.platform.ius}" />
			<arg value="-p2.os" />
			<arg value="${wildcard}" />
			<arg value="-p2.ws" />
			<arg value="${wildcard}" />
			<arg value="-p2.arch" />
			<arg value="${wildcard}" />
		</java>

		<!-- remove the p2 metadata, as they will never be used -->
		<delete dir="${install.destination}" includeEmptyDirs="true">
			<include name="p2/**" />
		</delete>
	</target>

	<target name="-define.properties.for.installation">
		<property name="install.destination" location="${sp:output}" />

		<property name="prerequisites.destination" location="${install.destination}-prerequisites" />
	</target>

	<target name="install.ius" depends="-define.properties.for.installation,-install.ius">
		<!-- cleanup -->
		<delete dir="${prerequisites.destination}" />
	</target>

	<target name="-define.properties.for.packaging">
		<property name="temp.directory" location="${sp:output}/${package.name}-temp" />

		<property name="install.directory.name" value="eclipse" />
		<property name="install.destination" location="${temp.directory}/${install.directory.name}" />

		<property name="prerequisites.destination" location="${temp.directory}/prerequisites" />
	</target>

	<target name="package.ius" depends="-define.properties.for.packaging,-install.ius,-define.package.qualifier">
		<!-- remove the p2 metadata, as they will never be used -->
		<delete dir="${install.destination}" includeEmptyDirs="true">
			<include name="artifacts.xml" />
		</delete>

		<!-- create the desired ZIP file -->
		<zip basedir="${temp.directory}" destfile="${sp:output}/${package.name}${package.qualifier}.zip">
			<include name="${install.directory.name}/**" />
		</zip>

		<!-- cleanup -->
		<delete dir="${temp.directory}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
			Removes the Uncategorized category (id="Dwfault") from our p2 repository
          target: p2.modification
          parameter:  site.p2.raw alias ${sp:raw.repository}                    
          			  product output alias ${sp:output}                    
         - - - - - - - - - - - - - - - - - -->
	<target name="p2.modification">
		<mkdir dir="${sp:output}" />
		<copydir dest="${sp:output}" src="${sp:raw.repository}" />
		<p2.remove.iu>
			<repository location="file://${sp:output}" />
			<iu id="Default" />
		</p2.remove.iu>
	</target>


</project>
